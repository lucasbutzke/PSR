
Tarefa1PSR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006138  08006138  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006138  08006138  00016138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006140  08006140  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f8  20000070  080061b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004368  080061b8  00024368  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180c2  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031ed  00000000  00000000  00038160  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  0003b350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0003c780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028f58  00000000  00000000  0003da28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010087  00000000  00000000  00066980  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001088a6  00000000  00000000  00076a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017f2ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005754  00000000  00000000  0017f328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800609c 	.word	0x0800609c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800609c 	.word	0x0800609c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f8f8 	bl	80007ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f005 f804 	bl	8005608 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f004 fe82 	bl	8005308 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_IncTick+0x20>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_IncTick+0x24>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4413      	add	r3, r2
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_IncTick+0x24>)
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000
 8000630:	20003dec 	.word	0x20003dec

08000634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return uwTick;
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <HAL_GetTick+0x14>)
 800063a:	681b      	ldr	r3, [r3, #0]
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20003dec 	.word	0x20003dec

0800064c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff ffee 	bl	8000634 <HAL_GetTick>
 8000658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000664:	d005      	beq.n	8000672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_Delay+0x40>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000672:	bf00      	nop
 8000674:	f7ff ffde 	bl	8000634 <HAL_GetTick>
 8000678:	4602      	mov	r2, r0
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	429a      	cmp	r2, r3
 8000682:	d8f7      	bhi.n	8000674 <HAL_Delay+0x28>
  {
  }
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000000 	.word	0x20000000

08000690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <__NVIC_SetPriorityGrouping+0x40>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x40>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	05fa0000 	.word	0x05fa0000

080006d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <__NVIC_GetPriorityGrouping+0x18>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	f003 0307 	and.w	r3, r3, #7
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	2b00      	cmp	r3, #0
 8000704:	db0b      	blt.n	800071e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 021f 	and.w	r2, r3, #31
 800070c:	4907      	ldr	r1, [pc, #28]	; (800072c <__NVIC_EnableIRQ+0x38>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	095b      	lsrs	r3, r3, #5
 8000714:	2001      	movs	r0, #1
 8000716:	fa00 f202 	lsl.w	r2, r0, r2
 800071a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e100 	.word	0xe000e100

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <__NVIC_SetPriority+0x4c>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4908      	ldr	r1, [pc, #32]	; (8000780 <__NVIC_SetPriority+0x50>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	f1c3 0307 	rsb	r3, r3, #7
 800079e:	2b04      	cmp	r3, #4
 80007a0:	bf28      	it	cs
 80007a2:	2304      	movcs	r3, #4
 80007a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d902      	bls.n	80007b4 <NVIC_EncodePriority+0x30>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3b03      	subs	r3, #3
 80007b2:	e000      	b.n	80007b6 <NVIC_EncodePriority+0x32>
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43da      	mvns	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	401a      	ands	r2, r3
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	43d9      	mvns	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	4313      	orrs	r3, r2
         );
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3724      	adds	r7, #36	; 0x24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff4c 	bl	8000690 <__NVIC_SetPriorityGrouping>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000812:	f7ff ff61 	bl	80006d8 <__NVIC_GetPriorityGrouping>
 8000816:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	68b9      	ldr	r1, [r7, #8]
 800081c:	6978      	ldr	r0, [r7, #20]
 800081e:	f7ff ffb1 	bl	8000784 <NVIC_EncodePriority>
 8000822:	4602      	mov	r2, r0
 8000824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff80 	bl	8000730 <__NVIC_SetPriority>
}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff54 	bl	80006f4 <__NVIC_EnableIRQ>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000864:	4ba9      	ldr	r3, [pc, #676]	; (8000b0c <HAL_ETH_Init+0x2b8>)
 8000866:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e183      	b.n	8000b82 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d106      	bne.n	8000894 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f004 fd62 	bl	8005358 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000894:	4b9e      	ldr	r3, [pc, #632]	; (8000b10 <HAL_ETH_Init+0x2bc>)
 8000896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000898:	4a9d      	ldr	r2, [pc, #628]	; (8000b10 <HAL_ETH_Init+0x2bc>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6453      	str	r3, [r2, #68]	; 0x44
 80008a0:	4b9b      	ldr	r3, [pc, #620]	; (8000b10 <HAL_ETH_Init+0x2bc>)
 80008a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008ac:	4b99      	ldr	r3, [pc, #612]	; (8000b14 <HAL_ETH_Init+0x2c0>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a98      	ldr	r2, [pc, #608]	; (8000b14 <HAL_ETH_Init+0x2c0>)
 80008b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008b6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008b8:	4b96      	ldr	r3, [pc, #600]	; (8000b14 <HAL_ETH_Init+0x2c0>)
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6a1b      	ldr	r3, [r3, #32]
 80008c0:	4994      	ldr	r1, [pc, #592]	; (8000b14 <HAL_ETH_Init+0x2c0>)
 80008c2:	4313      	orrs	r3, r2
 80008c4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f042 0201 	orr.w	r2, r2, #1
 80008d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008dc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80008de:	f7ff fea9 	bl	8000634 <HAL_GetTick>
 80008e2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008e4:	e011      	b.n	800090a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008e6:	f7ff fea5 	bl	8000634 <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008f4:	d909      	bls.n	800090a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2203      	movs	r2, #3
 80008fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000906:	2303      	movs	r3, #3
 8000908:	e13b      	b.n	8000b82 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1e4      	bne.n	80008e6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f023 031c 	bic.w	r3, r3, #28
 800092a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800092c:	f001 fba8 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 8000930:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	4a78      	ldr	r2, [pc, #480]	; (8000b18 <HAL_ETH_Init+0x2c4>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d908      	bls.n	800094c <HAL_ETH_Init+0xf8>
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	4a77      	ldr	r2, [pc, #476]	; (8000b1c <HAL_ETH_Init+0x2c8>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d804      	bhi.n	800094c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
 800094a:	e027      	b.n	800099c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	4a73      	ldr	r2, [pc, #460]	; (8000b1c <HAL_ETH_Init+0x2c8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d908      	bls.n	8000966 <HAL_ETH_Init+0x112>
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	4a72      	ldr	r2, [pc, #456]	; (8000b20 <HAL_ETH_Init+0x2cc>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d804      	bhi.n	8000966 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f043 030c 	orr.w	r3, r3, #12
 8000962:	61fb      	str	r3, [r7, #28]
 8000964:	e01a      	b.n	800099c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4a6d      	ldr	r2, [pc, #436]	; (8000b20 <HAL_ETH_Init+0x2cc>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d903      	bls.n	8000976 <HAL_ETH_Init+0x122>
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4a6c      	ldr	r2, [pc, #432]	; (8000b24 <HAL_ETH_Init+0x2d0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d911      	bls.n	800099a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	4a6a      	ldr	r2, [pc, #424]	; (8000b24 <HAL_ETH_Init+0x2d0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d908      	bls.n	8000990 <HAL_ETH_Init+0x13c>
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	4a69      	ldr	r2, [pc, #420]	; (8000b28 <HAL_ETH_Init+0x2d4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d804      	bhi.n	8000990 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	61fb      	str	r3, [r7, #28]
 800098e:	e005      	b.n	800099c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	e000      	b.n	800099c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800099a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009a8:	2100      	movs	r1, #0
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f956 	bl	8000c5c <HAL_ETH_WritePHYRegister>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00b      	beq.n	80009ce <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80009ba:	6939      	ldr	r1, [r7, #16]
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 f9b3 	bl	8000d28 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2201      	movs	r2, #1
 80009c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e0d9      	b.n	8000b82 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80009ce:	20ff      	movs	r0, #255	; 0xff
 80009d0:	f7ff fe3c 	bl	800064c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 80a7 	beq.w	8000b2c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80009de:	f7ff fe29 	bl	8000634 <HAL_GetTick>
 80009e2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	461a      	mov	r2, r3
 80009ea:	2101      	movs	r1, #1
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f8cd 	bl	8000b8c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80009f2:	f7ff fe1f 	bl	8000634 <HAL_GetTick>
 80009f6:	4602      	mov	r2, r0
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d90f      	bls.n	8000a24 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a08:	6939      	ldr	r1, [r7, #16]
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f98c 	bl	8000d28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a20:	2303      	movs	r3, #3
 8000a22:	e0ae      	b.n	8000b82 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0da      	beq.n	80009e4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a32:	2100      	movs	r1, #0
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 f911 	bl	8000c5c <HAL_ETH_WritePHYRegister>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00b      	beq.n	8000a58 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a44:	6939      	ldr	r1, [r7, #16]
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f96e 	bl	8000d28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a54:	2301      	movs	r3, #1
 8000a56:	e094      	b.n	8000b82 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a58:	f7ff fdec 	bl	8000634 <HAL_GetTick>
 8000a5c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	461a      	mov	r2, r3
 8000a64:	2101      	movs	r1, #1
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f890 	bl	8000b8c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a6c:	f7ff fde2 	bl	8000634 <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d90f      	bls.n	8000a9e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a82:	6939      	ldr	r1, [r7, #16]
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f94f 	bl	8000d28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	e071      	b.n	8000b82 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f003 0320 	and.w	r3, r3, #32
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0da      	beq.n	8000a5e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	461a      	mov	r2, r3
 8000aae:	211f      	movs	r1, #31
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f86b 	bl	8000b8c <HAL_ETH_ReadPHYRegister>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00b      	beq.n	8000ad4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ac0:	6939      	ldr	r1, [r7, #16]
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f930 	bl	8000d28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e056      	b.n	8000b82 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d004      	beq.n	8000ae8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	e002      	b.n	8000aee <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	e037      	b.n	8000b70 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	e032      	b.n	8000b70 <HAL_ETH_Init+0x31c>
 8000b0a:	bf00      	nop
 8000b0c:	03938700 	.word	0x03938700
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40013800 	.word	0x40013800
 8000b18:	01312cff 	.word	0x01312cff
 8000b1c:	02160ebf 	.word	0x02160ebf
 8000b20:	039386ff 	.word	0x039386ff
 8000b24:	05f5e0ff 	.word	0x05f5e0ff
 8000b28:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	08db      	lsrs	r3, r3, #3
 8000b32:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f889 	bl	8000c5c <HAL_ETH_WritePHYRegister>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00b      	beq.n	8000b68 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b54:	6939      	ldr	r1, [r7, #16]
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f8e6 	bl	8000d28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e00c      	b.n	8000b82 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b68:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b6c:	f7ff fd6e 	bl	800064c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b70:	6939      	ldr	r1, [r7, #16]
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f8d8 	bl	8000d28 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop

08000b8c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	460b      	mov	r3, r1
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b82      	cmp	r3, #130	; 0x82
 8000bac:	d101      	bne.n	8000bb2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	e050      	b.n	8000c54 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2282      	movs	r2, #130	; 0x82
 8000bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f003 031c 	and.w	r3, r3, #28
 8000bc8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	8a1b      	ldrh	r3, [r3, #16]
 8000bce:	02db      	lsls	r3, r3, #11
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000bd8:	897b      	ldrh	r3, [r7, #10]
 8000bda:	019b      	lsls	r3, r3, #6
 8000bdc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f023 0302 	bic.w	r3, r3, #2
 8000bec:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000bfe:	f7ff fd19 	bl	8000634 <HAL_GetTick>
 8000c02:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c04:	e015      	b.n	8000c32 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000c06:	f7ff fd15 	bl	8000634 <HAL_GetTick>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c14:	d309      	bcc.n	8000c2a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e014      	b.n	8000c54 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1e4      	bne.n	8000c06 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	460b      	mov	r3, r1
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b42      	cmp	r3, #66	; 0x42
 8000c7c:	d101      	bne.n	8000c82 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e04e      	b.n	8000d20 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2242      	movs	r2, #66	; 0x42
 8000c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f003 031c 	and.w	r3, r3, #28
 8000c98:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	8a1b      	ldrh	r3, [r3, #16]
 8000c9e:	02db      	lsls	r3, r3, #11
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000ca8:	897b      	ldrh	r3, [r7, #10]
 8000caa:	019b      	lsls	r3, r3, #6
 8000cac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd8:	f7ff fcac 	bl	8000634 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000cde:	e015      	b.n	8000d0c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000ce0:	f7ff fca8 	bl	8000634 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cee:	d309      	bcc.n	8000d04 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e00d      	b.n	8000d20 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1e4      	bne.n	8000ce0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0b0      	sub	sp, #192	; 0xc0
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d007      	beq.n	8000d4e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d44:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d103      	bne.n	8000d76 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d72:	663b      	str	r3, [r7, #96]	; 0x60
 8000d74:	e001      	b.n	8000d7a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000d84:	2300      	movs	r3, #0
 8000d86:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000dfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e00:	4bab      	ldr	r3, [pc, #684]	; (80010b0 <ETH_MACDMAConfig+0x388>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e0c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000e10:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000e14:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000e1a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000e1e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000e22:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000e28:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000e2c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000e30:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000e34:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000e38:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000e3c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e42:	4313      	orrs	r3, r2
 8000e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e50:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff fbf5 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e6a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e6c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e70:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000e72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000e74:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000e7a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000e80:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000e82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000e86:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000e8c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000e90:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000e98:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e9a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff fbd0 	bl	800064c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000eb4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ebe:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000ec8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000ed4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ed8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000edc:	4013      	ands	r3, r2
 8000ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000ee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ee6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000ee8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000eec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000eee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000ef2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000ef8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000efe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000f04:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f18:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff fb91 	bl	800064c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f32:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f34:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000f38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff fb7c 	bl	800064c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f5c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f66:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000f6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f70:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000f82:	2304      	movs	r3, #4
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000f92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f241 0318 	movw	r3, #4120	; 0x1018
 8000fb2:	4413      	add	r3, r2
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000fba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <ETH_MACDMAConfig+0x38c>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000fc6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000fca:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8000fcc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8000fce:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8000fd0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8000fd2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8000fd4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8000fd6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8000fd8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8000fda:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8000fde:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8000fe2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8000fe6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000fe8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fec:	4313      	orrs	r3, r2
 8000fee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	f241 0318 	movw	r3, #4120	; 0x1018
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001000:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f241 0318 	movw	r3, #4120	; 0x1018
 800100a:	4413      	add	r3, r2
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fb1a 	bl	800064c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001020:	4413      	add	r3, r2
 8001022:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001026:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800102a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800102c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800102e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001030:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001034:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001038:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800103a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800103c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800103e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001042:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800104c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001050:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff faf3 	bl	800064c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800106e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001072:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10d      	bne.n	8001098 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	f241 031c 	movw	r3, #4124	; 0x101c
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6811      	ldr	r1, [r2, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <ETH_MACDMAConfig+0x390>)
 800108e:	431a      	orrs	r2, r3
 8001090:	f241 031c 	movw	r3, #4124	; 0x101c
 8001094:	440b      	add	r3, r1
 8001096:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	461a      	mov	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f80b 	bl	80010bc <ETH_MACAddressConfig>
}
 80010a6:	bf00      	nop
 80010a8:	37c0      	adds	r7, #192	; 0xc0
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	ff20810f 	.word	0xff20810f
 80010b4:	f8de3f23 	.word	0xf8de3f23
 80010b8:	00010040 	.word	0x00010040

080010bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3305      	adds	r3, #5
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	3204      	adds	r2, #4
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <ETH_MACAddressConfig+0x68>)
 80010de:	4413      	add	r3, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3303      	adds	r3, #3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	061a      	lsls	r2, r3, #24
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3302      	adds	r3, #2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	041b      	lsls	r3, r3, #16
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3301      	adds	r3, #1
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	4313      	orrs	r3, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <ETH_MACAddressConfig+0x6c>)
 800110e:	4413      	add	r3, r2
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	6013      	str	r3, [r2, #0]
}
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40028040 	.word	0x40028040
 8001128:	40028044 	.word	0x40028044

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e175      	b.n	8001438 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 8164 	bne.w	8001432 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x4e>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b12      	cmp	r3, #18
 8001178:	d123      	bne.n	80011c2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	69b9      	ldr	r1, [r7, #24]
 80011be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0203 	and.w	r2, r3, #3
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d00b      	beq.n	8001216 <HAL_GPIO_Init+0xea>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800120a:	2b11      	cmp	r3, #17
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b12      	cmp	r3, #18
 8001214:	d130      	bne.n	8001278 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f003 0201 	and.w	r2, r3, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80be 	beq.w	8001432 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b65      	ldr	r3, [pc, #404]	; (800144c <HAL_GPIO_Init+0x320>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a64      	ldr	r2, [pc, #400]	; (800144c <HAL_GPIO_Init+0x320>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b62      	ldr	r3, [pc, #392]	; (800144c <HAL_GPIO_Init+0x320>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012ce:	4a60      	ldr	r2, [pc, #384]	; (8001450 <HAL_GPIO_Init+0x324>)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x328>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d037      	beq.n	800136a <HAL_GPIO_Init+0x23e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a56      	ldr	r2, [pc, #344]	; (8001458 <HAL_GPIO_Init+0x32c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d031      	beq.n	8001366 <HAL_GPIO_Init+0x23a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a55      	ldr	r2, [pc, #340]	; (800145c <HAL_GPIO_Init+0x330>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d02b      	beq.n	8001362 <HAL_GPIO_Init+0x236>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_GPIO_Init+0x334>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d025      	beq.n	800135e <HAL_GPIO_Init+0x232>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_GPIO_Init+0x338>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01f      	beq.n	800135a <HAL_GPIO_Init+0x22e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x33c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0x22a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x340>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x226>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x344>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x222>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x348>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x21e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x34c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x21a>
 8001342:	2309      	movs	r3, #9
 8001344:	e012      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001346:	230a      	movs	r3, #10
 8001348:	e010      	b.n	800136c <HAL_GPIO_Init+0x240>
 800134a:	2308      	movs	r3, #8
 800134c:	e00e      	b.n	800136c <HAL_GPIO_Init+0x240>
 800134e:	2307      	movs	r3, #7
 8001350:	e00c      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001352:	2306      	movs	r3, #6
 8001354:	e00a      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001356:	2305      	movs	r3, #5
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x240>
 800135a:	2304      	movs	r3, #4
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x240>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x240>
 800136a:	2300      	movs	r3, #0
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800137c:	4934      	ldr	r1, [pc, #208]	; (8001450 <HAL_GPIO_Init+0x324>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138a:	4b3c      	ldr	r3, [pc, #240]	; (800147c <HAL_GPIO_Init+0x350>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ae:	4a33      	ldr	r2, [pc, #204]	; (800147c <HAL_GPIO_Init+0x350>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <HAL_GPIO_Init+0x350>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <HAL_GPIO_Init+0x350>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <HAL_GPIO_Init+0x350>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_GPIO_Init+0x350>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_GPIO_Init+0x350>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a13      	ldr	r2, [pc, #76]	; (800147c <HAL_GPIO_Init+0x350>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f ae86 	bls.w	800114c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001440:	bf00      	nop
 8001442:	3724      	adds	r7, #36	; 0x24
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40021400 	.word	0x40021400
 800146c:	40021800 	.word	0x40021800
 8001470:	40021c00 	.word	0x40021c00
 8001474:	40022000 	.word	0x40022000
 8001478:	40022400 	.word	0x40022400
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 fee6 	bl	80052a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	b08f      	sub	sp, #60	; 0x3c
 80014e8:	af0a      	add	r7, sp, #40	; 0x28
 80014ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e10a      	b.n	800170c <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f004 f820 	bl	8005550 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f002 f997 	bl	8003850 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	687e      	ldr	r6, [r7, #4]
 800152a:	466d      	mov	r5, sp
 800152c:	f106 0410 	add.w	r4, r6, #16
 8001530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800153c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001540:	1d33      	adds	r3, r6, #4
 8001542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f002 f92b 	bl	80037a0 <USB_CoreInit>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0d7      	b.n	800170c <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f002 f985 	bl	8003872 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e04a      	b.n	8001604 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	333d      	adds	r3, #61	; 0x3d
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	333c      	adds	r3, #60	; 0x3c
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	b298      	uxth	r0, r3
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	3342      	adds	r3, #66	; 0x42
 80015aa:	4602      	mov	r2, r0
 80015ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	333f      	adds	r3, #63	; 0x3f
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	3344      	adds	r3, #68	; 0x44
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	1a9b      	subs	r3, r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	3348      	adds	r3, #72	; 0x48
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	3350      	adds	r3, #80	; 0x50
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	3301      	adds	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3af      	bcc.n	800156e <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e044      	b.n	800169e <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	3301      	adds	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3b5      	bcc.n	8001614 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	687e      	ldr	r6, [r7, #4]
 80016b0:	466d      	mov	r5, sp
 80016b2:	f106 0410 	add.w	r4, r6, #16
 80016b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c6:	1d33      	adds	r3, r6, #4
 80016c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ca:	6838      	ldr	r0, [r7, #0]
 80016cc:	f002 f8fc 	bl	80038c8 <USB_DevInit>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e014      	b.n	800170c <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d102      	bne.n	8001700 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f80a 	bl	8001714 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fabc 	bl	8003c82 <USB_DevDisconnect>

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001714 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_PCDEx_ActivateLPM+0x44>)
 8001744:	4313      	orrs	r3, r2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	10000003 	.word	0x10000003

0800175c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000

0800177c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_PWREx_EnableOverDrive+0x98>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <HAL_PWREx_EnableOverDrive+0x98>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_PWREx_EnableOverDrive+0x98>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017aa:	f7fe ff43 	bl	8000634 <HAL_GetTick>
 80017ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017b0:	e009      	b.n	80017c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017b2:	f7fe ff3f 	bl	8000634 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017c0:	d901      	bls.n	80017c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e022      	b.n	800180c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d1ee      	bne.n	80017b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e0:	f7fe ff28 	bl	8000634 <HAL_GetTick>
 80017e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017e6:	e009      	b.n	80017fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017e8:	f7fe ff24 	bl	8000634 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f6:	d901      	bls.n	80017fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e007      	b.n	800180c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001808:	d1ee      	bne.n	80017e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000

0800181c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e25e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8087 	beq.w	800194e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001840:	4b96      	ldr	r3, [pc, #600]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b04      	cmp	r3, #4
 800184a:	d00c      	beq.n	8001866 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184c:	4b93      	ldr	r3, [pc, #588]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d112      	bne.n	800187e <HAL_RCC_OscConfig+0x62>
 8001858:	4b90      	ldr	r3, [pc, #576]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001864:	d10b      	bne.n	800187e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001866:	4b8d      	ldr	r3, [pc, #564]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d06c      	beq.n	800194c <HAL_RCC_OscConfig+0x130>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d168      	bne.n	800194c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e238      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x7a>
 8001888:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a83      	ldr	r2, [pc, #524]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e02e      	b.n	80018f4 <HAL_RCC_OscConfig+0xd8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x9c>
 800189e:	4b7f      	ldr	r3, [pc, #508]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7e      	ldr	r2, [pc, #504]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b7c      	ldr	r3, [pc, #496]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7b      	ldr	r2, [pc, #492]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xd8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0xc0>
 80018c2:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a75      	ldr	r2, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a72      	ldr	r2, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xd8>
 80018dc:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6b      	ldr	r2, [pc, #428]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7fe fe9a 	bl	8000634 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001904:	f7fe fe96 	bl	8000634 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1ec      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b61      	ldr	r3, [pc, #388]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xe8>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7fe fe86 	bl	8000634 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7fe fe82 	bl	8000634 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1d8      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x110>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d069      	beq.n	8001a2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800195a:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b08      	cmp	r3, #8
 8001970:	d11c      	bne.n	80019ac <HAL_RCC_OscConfig+0x190>
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d116      	bne.n	80019ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x17a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e1ac      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	493d      	ldr	r1, [pc, #244]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	e040      	b.n	8001a2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d023      	beq.n	80019fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a38      	ldr	r2, [pc, #224]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7fe fe38 	bl	8000634 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c8:	f7fe fe34 	bl	8000634 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e18a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4929      	ldr	r1, [pc, #164]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
 80019fa:	e018      	b.n	8001a2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7fe fe14 	bl	8000634 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a10:	f7fe fe10 	bl	8000634 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e166      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d038      	beq.n	8001aac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d019      	beq.n	8001a76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a46:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7fe fdf1 	bl	8000634 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a56:	f7fe fded 	bl	8000634 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e143      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x23a>
 8001a74:	e01a      	b.n	8001aac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_RCC_OscConfig+0x280>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7fe fdd7 	bl	8000634 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8a:	f7fe fdd3 	bl	8000634 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d903      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e129      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
 8001a9c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	4b95      	ldr	r3, [pc, #596]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ee      	bne.n	8001a8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a4 	beq.w	8001c02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4b8f      	ldr	r3, [pc, #572]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10d      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b8c      	ldr	r3, [pc, #560]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a8b      	ldr	r2, [pc, #556]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b89      	ldr	r3, [pc, #548]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae2:	4b86      	ldr	r3, [pc, #536]	; (8001cfc <HAL_RCC_OscConfig+0x4e0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001aee:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <HAL_RCC_OscConfig+0x4e0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a82      	ldr	r2, [pc, #520]	; (8001cfc <HAL_RCC_OscConfig+0x4e0>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afa:	f7fe fd9b 	bl	8000634 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7fe fd97 	bl	8000634 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0ed      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b14:	4b79      	ldr	r3, [pc, #484]	; (8001cfc <HAL_RCC_OscConfig+0x4e0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x31a>
 8001b28:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	e02d      	b.n	8001b92 <HAL_RCC_OscConfig+0x376>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x33c>
 8001b3e:	4b6e      	ldr	r3, [pc, #440]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	4a6d      	ldr	r2, [pc, #436]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4a:	4b6b      	ldr	r3, [pc, #428]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	4a6a      	ldr	r2, [pc, #424]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70
 8001b56:	e01c      	b.n	8001b92 <HAL_RCC_OscConfig+0x376>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d10c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x35e>
 8001b60:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	4a64      	ldr	r2, [pc, #400]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6c:	4b62      	ldr	r3, [pc, #392]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	4a61      	ldr	r2, [pc, #388]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	; 0x70
 8001b78:	e00b      	b.n	8001b92 <HAL_RCC_OscConfig+0x376>
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a5e      	ldr	r2, [pc, #376]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a5b      	ldr	r2, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d015      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7fe fd4b 	bl	8000634 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7fe fd47 	bl	8000634 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e09b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ee      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x386>
 8001bc4:	e014      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7fe fd35 	bl	8000634 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7fe fd31 	bl	8000634 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e085      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	4b44      	ldr	r3, [pc, #272]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1ee      	bne.n	8001bce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d105      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf6:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a3f      	ldr	r2, [pc, #252]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d071      	beq.n	8001cee <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d069      	beq.n	8001cea <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d14b      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a35      	ldr	r2, [pc, #212]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7fe fd03 	bl	8000634 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe fcff 	bl	8000634 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e055      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	019b      	lsls	r3, r3, #6
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	085b      	lsrs	r3, r3, #1
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	061b      	lsls	r3, r3, #24
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	071b      	lsls	r3, r3, #28
 8001c7c:	491e      	ldr	r1, [pc, #120]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fcd1 	bl	8000634 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe fccd 	bl	8000634 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e023      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x47a>
 8001cb4:	e01b      	b.n	8001cee <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7fe fcb7 	bl	8000634 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cca:	f7fe fcb3 	bl	8000634 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e009      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x4dc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x4ae>
 8001ce8:	e001      	b.n	8001cee <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000

08001d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0ce      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b66      	ldr	r3, [pc, #408]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 020f 	bic.w	r2, r3, #15
 8001d2e:	4964      	ldr	r1, [pc, #400]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b62      	ldr	r3, [pc, #392]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b6      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4a57      	ldr	r2, [pc, #348]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d78:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a51      	ldr	r2, [pc, #324]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	494c      	ldr	r1, [pc, #304]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d040      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07d      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e071      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e069      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4935      	ldr	r1, [pc, #212]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df4:	f7fe fc1e 	bl	8000634 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7fe fc1a 	bl	8000634 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e051      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d210      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 020f 	bic.w	r2, r3, #15
 8001e3a:	4921      	ldr	r1, [pc, #132]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e030      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4915      	ldr	r1, [pc, #84]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	490d      	ldr	r1, [pc, #52]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e92:	f000 f81d 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e96:	4601      	mov	r1, r0
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_RCC_ClockConfig+0x1cc>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f003 fbaa 	bl	8005608 <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	080060ec 	.word	0x080060ec
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee6:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d007      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x32>
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d008      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x38>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 80b4 	bne.w	8002064 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001efe:	60bb      	str	r3, [r7, #8]
       break;
 8001f00:	e0b3      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f02:	4b5e      	ldr	r3, [pc, #376]	; (800207c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f04:	60bb      	str	r3, [r7, #8]
      break;
 8001f06:	e0b0      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f08:	4b5a      	ldr	r3, [pc, #360]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f10:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f12:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d04a      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	4b55      	ldr	r3, [pc, #340]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	f04f 0400 	mov.w	r4, #0
 8001f28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	ea03 0501 	and.w	r5, r3, r1
 8001f34:	ea04 0602 	and.w	r6, r4, r2
 8001f38:	4629      	mov	r1, r5
 8001f3a:	4632      	mov	r2, r6
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	f04f 0400 	mov.w	r4, #0
 8001f44:	0154      	lsls	r4, r2, #5
 8001f46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f4a:	014b      	lsls	r3, r1, #5
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4622      	mov	r2, r4
 8001f50:	1b49      	subs	r1, r1, r5
 8001f52:	eb62 0206 	sbc.w	r2, r2, r6
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	f04f 0400 	mov.w	r4, #0
 8001f5e:	0194      	lsls	r4, r2, #6
 8001f60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f64:	018b      	lsls	r3, r1, #6
 8001f66:	1a5b      	subs	r3, r3, r1
 8001f68:	eb64 0402 	sbc.w	r4, r4, r2
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	00e2      	lsls	r2, r4, #3
 8001f76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f7a:	00d9      	lsls	r1, r3, #3
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4614      	mov	r4, r2
 8001f80:	195b      	adds	r3, r3, r5
 8001f82:	eb44 0406 	adc.w	r4, r4, r6
 8001f86:	f04f 0100 	mov.w	r1, #0
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	0262      	lsls	r2, r4, #9
 8001f90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f94:	0259      	lsls	r1, r3, #9
 8001f96:	460b      	mov	r3, r1
 8001f98:	4614      	mov	r4, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f04f 0400 	mov.w	r4, #0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	f7fe f9a2 	bl	80002f0 <__aeabi_uldivmod>
 8001fac:	4603      	mov	r3, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e049      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	f04f 0400 	mov.w	r4, #0
 8001fbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	ea03 0501 	and.w	r5, r3, r1
 8001fca:	ea04 0602 	and.w	r6, r4, r2
 8001fce:	4629      	mov	r1, r5
 8001fd0:	4632      	mov	r2, r6
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	f04f 0400 	mov.w	r4, #0
 8001fda:	0154      	lsls	r4, r2, #5
 8001fdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fe0:	014b      	lsls	r3, r1, #5
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4622      	mov	r2, r4
 8001fe6:	1b49      	subs	r1, r1, r5
 8001fe8:	eb62 0206 	sbc.w	r2, r2, r6
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	f04f 0400 	mov.w	r4, #0
 8001ff4:	0194      	lsls	r4, r2, #6
 8001ff6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ffa:	018b      	lsls	r3, r1, #6
 8001ffc:	1a5b      	subs	r3, r3, r1
 8001ffe:	eb64 0402 	sbc.w	r4, r4, r2
 8002002:	f04f 0100 	mov.w	r1, #0
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	00e2      	lsls	r2, r4, #3
 800200c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002010:	00d9      	lsls	r1, r3, #3
 8002012:	460b      	mov	r3, r1
 8002014:	4614      	mov	r4, r2
 8002016:	195b      	adds	r3, r3, r5
 8002018:	eb44 0406 	adc.w	r4, r4, r6
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	02a2      	lsls	r2, r4, #10
 8002026:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800202a:	0299      	lsls	r1, r3, #10
 800202c:	460b      	mov	r3, r1
 800202e:	4614      	mov	r4, r2
 8002030:	4618      	mov	r0, r3
 8002032:	4621      	mov	r1, r4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f04f 0400 	mov.w	r4, #0
 800203a:	461a      	mov	r2, r3
 800203c:	4623      	mov	r3, r4
 800203e:	f7fe f957 	bl	80002f0 <__aeabi_uldivmod>
 8002042:	4603      	mov	r3, r0
 8002044:	460c      	mov	r4, r1
 8002046:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	3301      	adds	r3, #1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002060:	60bb      	str	r3, [r7, #8]
      break;
 8002062:	e002      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002066:	60bb      	str	r3, [r7, #8]
      break;
 8002068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206a:	68bb      	ldr	r3, [r7, #8]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	00f42400 	.word	0x00f42400
 800207c:	007a1200 	.word	0x007a1200

08002080 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_GetHCLKFreq+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800209c:	f7ff fff0 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020a0:	4601      	mov	r1, r0
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0a9b      	lsrs	r3, r3, #10
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	080060fc 	.word	0x080060fc

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020c4:	f7ff ffdc 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020c8:	4601      	mov	r1, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0b5b      	lsrs	r3, r3, #13
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	080060fc 	.word	0x080060fc

080020e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	220f      	movs	r2, #15
 80020f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_GetClockConfig+0x5c>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_RCC_GetClockConfig+0x60>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 020f 	and.w	r2, r3, #15
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	601a      	str	r2, [r3, #0]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40023c00 	.word	0x40023c00

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d012      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002174:	4b69      	ldr	r3, [pc, #420]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a68      	ldr	r2, [pc, #416]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800217e:	6093      	str	r3, [r2, #8]
 8002180:	4b66      	ldr	r3, [pc, #408]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002188:	4964      	ldr	r1, [pc, #400]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002196:	2301      	movs	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d017      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	4959      	ldr	r1, [pc, #356]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c4:	d101      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d017      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021e2:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	494a      	ldr	r1, [pc, #296]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002200:	d101      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800220e:	2301      	movs	r3, #1
 8002210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800221e:	2301      	movs	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 808b 	beq.w	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a39      	ldr	r2, [pc, #228]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
 800223c:	4b37      	ldr	r3, [pc, #220]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a34      	ldr	r2, [pc, #208]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002254:	f7fe f9ee 	bl	8000634 <HAL_GetTick>
 8002258:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7fe f9ea 	bl	8000634 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e38d      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800227a:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002282:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d035      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d02e      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d114      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe f9b2 	bl	8000634 <HAL_GetTick>
 80022d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d2:	e00a      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe f9ae 	bl	8000634 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e34f      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0ee      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002302:	d111      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002312:	400b      	ands	r3, r1
 8002314:	4901      	ldr	r1, [pc, #4]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
 800231a:	e00b      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800231c:	40023800 	.word	0x40023800
 8002320:	40007000 	.word	0x40007000
 8002324:	0ffffcff 	.word	0x0ffffcff
 8002328:	4bb3      	ldr	r3, [pc, #716]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4ab2      	ldr	r2, [pc, #712]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800232e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002332:	6093      	str	r3, [r2, #8]
 8002334:	4bb0      	ldr	r3, [pc, #704]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	49ad      	ldr	r1, [pc, #692]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002342:	4313      	orrs	r3, r2
 8002344:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002352:	4ba9      	ldr	r3, [pc, #676]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002358:	4aa7      	ldr	r2, [pc, #668]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800235a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002362:	4ba5      	ldr	r3, [pc, #660]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002364:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	49a2      	ldr	r1, [pc, #648]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002380:	4b9d      	ldr	r3, [pc, #628]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800238e:	499a      	ldr	r1, [pc, #616]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a2:	4b95      	ldr	r3, [pc, #596]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b0:	4991      	ldr	r1, [pc, #580]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023c4:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d2:	4989      	ldr	r1, [pc, #548]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023e6:	4b84      	ldr	r3, [pc, #528]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4980      	ldr	r1, [pc, #512]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002408:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4978      	ldr	r1, [pc, #480]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242a:	4b73      	ldr	r3, [pc, #460]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f023 020c 	bic.w	r2, r3, #12
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	496f      	ldr	r1, [pc, #444]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800244c:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	4967      	ldr	r1, [pc, #412]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800246e:	4b62      	ldr	r3, [pc, #392]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247c:	495e      	ldr	r1, [pc, #376]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002490:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	4956      	ldr	r1, [pc, #344]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024b2:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	494d      	ldr	r1, [pc, #308]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024d4:	4b48      	ldr	r3, [pc, #288]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	4945      	ldr	r1, [pc, #276]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002504:	493c      	ldr	r1, [pc, #240]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002518:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002526:	4934      	ldr	r1, [pc, #208]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d011      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002548:	492b      	ldr	r1, [pc, #172]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002558:	d101      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800256a:	2301      	movs	r3, #1
 800256c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002588:	491b      	ldr	r1, [pc, #108]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00b      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800259c:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ac:	4912      	ldr	r1, [pc, #72]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00b      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d0:	4909      	ldr	r1, [pc, #36]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00f      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	e002      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	4985      	ldr	r1, [pc, #532]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002610:	4b80      	ldr	r3, [pc, #512]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002616:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002620:	497c      	ldr	r1, [pc, #496]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d005      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002636:	f040 80d6 	bne.w	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800263a:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a75      	ldr	r2, [pc, #468]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002640:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002646:	f7fd fff5 	bl	8000634 <HAL_GetTick>
 800264a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800264e:	f7fd fff1 	bl	8000634 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e194      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002660:	4b6c      	ldr	r3, [pc, #432]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d021      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11d      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002680:	4b64      	ldr	r3, [pc, #400]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800268e:	4b61      	ldr	r3, [pc, #388]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002694:	0e1b      	lsrs	r3, r3, #24
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	019a      	lsls	r2, r3, #6
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	071b      	lsls	r3, r3, #28
 80026b4:	4957      	ldr	r1, [pc, #348]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d02e      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e6:	d129      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026e8:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fc:	0f1b      	lsrs	r3, r3, #28
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	019a      	lsls	r2, r3, #6
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	041b      	lsls	r3, r3, #16
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	431a      	orrs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	071b      	lsls	r3, r3, #28
 800271c:	493d      	ldr	r1, [pc, #244]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800272a:	f023 021f 	bic.w	r2, r3, #31
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	3b01      	subs	r3, #1
 8002734:	4937      	ldr	r1, [pc, #220]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01d      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800274a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274e:	0e1b      	lsrs	r3, r3, #24
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002756:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275c:	0f1b      	lsrs	r3, r3, #28
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	019a      	lsls	r2, r3, #6
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	431a      	orrs	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	431a      	orrs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	071b      	lsls	r3, r3, #28
 800277c:	4925      	ldr	r1, [pc, #148]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d011      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	019a      	lsls	r2, r3, #6
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	061b      	lsls	r3, r3, #24
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	071b      	lsls	r3, r3, #28
 80027ac:	4919      	ldr	r1, [pc, #100]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fd ff38 	bl	8000634 <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027c8:	f7fd ff34 	bl	8000634 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0d7      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	f040 80cd 	bne.w	8002988 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fa:	f7fd ff1b 	bl	8000634 <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002802:	f7fd ff17 	bl	8000634 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b64      	cmp	r3, #100	; 0x64
 800280e:	d903      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0ba      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002814:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002824:	d0ed      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002842:	2b00      	cmp	r3, #0
 8002844:	d02e      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d12a      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800284e:	4b51      	ldr	r3, [pc, #324]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800285c:	4b4d      	ldr	r3, [pc, #308]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	0f1b      	lsrs	r3, r3, #28
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	019a      	lsls	r2, r3, #6
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	061b      	lsls	r3, r3, #24
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	071b      	lsls	r3, r3, #28
 8002882:	4944      	ldr	r1, [pc, #272]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800288a:	4b42      	ldr	r3, [pc, #264]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002890:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	493d      	ldr	r1, [pc, #244]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d022      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b8:	d11d      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	0e1b      	lsrs	r3, r3, #24
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	0f1b      	lsrs	r3, r3, #28
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	019a      	lsls	r2, r3, #6
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	071b      	lsls	r3, r3, #28
 80028ee:	4929      	ldr	r1, [pc, #164]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d028      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	0e1b      	lsrs	r3, r3, #24
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002910:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	431a      	orrs	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	4917      	ldr	r1, [pc, #92]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	4911      	ldr	r1, [pc, #68]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002960:	f7fd fe68 	bl	8000634 <HAL_GetTick>
 8002964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002968:	f7fd fe64 	bl	8000634 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e007      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002986:	d1ef      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e01d      	b.n	80029e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f815 	bl	80029ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	4610      	mov	r0, r2
 80029d8:	f000 f986 	bl	8002ce8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_TIM_Base_Start_IT+0x50>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d00b      	beq.n	8002a46 <HAL_TIM_Base_Start_IT+0x42>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d007      	beq.n	8002a46 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	00010007 	.word	0x00010007

08002a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d122      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0202 	mvn.w	r2, #2
 8002a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f905 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8f7 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f908 	bl	8002cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0204 	mvn.w	r2, #4
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8db 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8cd 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8de 	bl	8002cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0208 	mvn.w	r2, #8
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2204      	movs	r2, #4
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8b1 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8a3 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8b4 	bl	8002cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0210 	mvn.w	r2, #16
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2208      	movs	r2, #8
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f887 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f879 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f88a 	bl	8002cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10e      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0201 	mvn.w	r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f002 fb7c 	bl	80052d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b80      	cmp	r3, #128	; 0x80
 8002be8:	d10e      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b80      	cmp	r3, #128	; 0x80
 8002bf6:	d107      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f91a 	bl	8002e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c16:	d10e      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f90d 	bl	8002e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d10e      	bne.n	8002c62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d107      	bne.n	8002c62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f838 	bl	8002cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d10e      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d107      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f06f 0220 	mvn.w	r2, #32
 8002c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f8cd 	bl	8002e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a40      	ldr	r2, [pc, #256]	; (8002dfc <TIM_Base_SetConfig+0x114>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d06:	d00f      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3d      	ldr	r2, [pc, #244]	; (8002e00 <TIM_Base_SetConfig+0x118>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3c      	ldr	r2, [pc, #240]	; (8002e04 <TIM_Base_SetConfig+0x11c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3b      	ldr	r2, [pc, #236]	; (8002e08 <TIM_Base_SetConfig+0x120>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <TIM_Base_SetConfig+0x124>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a2f      	ldr	r2, [pc, #188]	; (8002dfc <TIM_Base_SetConfig+0x114>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d02b      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d48:	d027      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2c      	ldr	r2, [pc, #176]	; (8002e00 <TIM_Base_SetConfig+0x118>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d023      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2b      	ldr	r2, [pc, #172]	; (8002e04 <TIM_Base_SetConfig+0x11c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01f      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <TIM_Base_SetConfig+0x120>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01b      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <TIM_Base_SetConfig+0x124>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d017      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <TIM_Base_SetConfig+0x128>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <TIM_Base_SetConfig+0x12c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00f      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <TIM_Base_SetConfig+0x130>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00b      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <TIM_Base_SetConfig+0x134>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <TIM_Base_SetConfig+0x138>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a23      	ldr	r2, [pc, #140]	; (8002e24 <TIM_Base_SetConfig+0x13c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <TIM_Base_SetConfig+0x114>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0xf8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a0c      	ldr	r2, [pc, #48]	; (8002e0c <TIM_Base_SetConfig+0x124>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d103      	bne.n	8002de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	615a      	str	r2, [r3, #20]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	40010400 	.word	0x40010400
 8002e10:	40014000 	.word	0x40014000
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800
 8002e1c:	40001800 	.word	0x40001800
 8002e20:	40001c00 	.word	0x40001c00
 8002e24:	40002000 	.word	0x40002000

08002e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e040      	b.n	8002ef8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f002 fb1e 	bl	80054c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2224      	movs	r2, #36	; 0x24
 8002e90:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8be 	bl	8003024 <UART_SetConfig>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e022      	b.n	8002ef8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fb56 	bl	800356c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ede:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fbdd 	bl	80036b0 <UART_CheckIdleState>
 8002ef6:	4603      	mov	r3, r0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d17f      	bne.n	8003018 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_UART_Transmit+0x24>
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e078      	b.n	800301a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Transmit+0x36>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e071      	b.n	800301a <HAL_UART_Transmit+0x11a>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	; 0x21
 8002f48:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f4a:	f7fd fb73 	bl	8000634 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0x7c>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f84:	e02c      	b.n	8002fe0 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fbbc 	bl	800370e <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e03c      	b.n	800301a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e007      	b.n	8002fce <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1cc      	bne.n	8002f86 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2140      	movs	r1, #64	; 0x40
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fb89 	bl	800370e <UART_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e009      	b.n	800301a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800302c:	2300      	movs	r3, #0
 800302e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4bb1      	ldr	r3, [pc, #708]	; (8003318 <UART_SetConfig+0x2f4>)
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	6939      	ldr	r1, [r7, #16]
 800305c:	430b      	orrs	r3, r1
 800305e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a9f      	ldr	r2, [pc, #636]	; (800331c <UART_SetConfig+0x2f8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d121      	bne.n	80030e8 <UART_SetConfig+0xc4>
 80030a4:	4b9e      	ldr	r3, [pc, #632]	; (8003320 <UART_SetConfig+0x2fc>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d816      	bhi.n	80030e0 <UART_SetConfig+0xbc>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x94>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030d5 	.word	0x080030d5
 80030c0:	080030cf 	.word	0x080030cf
 80030c4:	080030db 	.word	0x080030db
 80030c8:	2301      	movs	r3, #1
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e151      	b.n	8003372 <UART_SetConfig+0x34e>
 80030ce:	2302      	movs	r3, #2
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e14e      	b.n	8003372 <UART_SetConfig+0x34e>
 80030d4:	2304      	movs	r3, #4
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e14b      	b.n	8003372 <UART_SetConfig+0x34e>
 80030da:	2308      	movs	r3, #8
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e148      	b.n	8003372 <UART_SetConfig+0x34e>
 80030e0:	2310      	movs	r3, #16
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	bf00      	nop
 80030e6:	e144      	b.n	8003372 <UART_SetConfig+0x34e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a8d      	ldr	r2, [pc, #564]	; (8003324 <UART_SetConfig+0x300>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d134      	bne.n	800315c <UART_SetConfig+0x138>
 80030f2:	4b8b      	ldr	r3, [pc, #556]	; (8003320 <UART_SetConfig+0x2fc>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	d829      	bhi.n	8003154 <UART_SetConfig+0x130>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0xe4>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	0800313d 	.word	0x0800313d
 800310c:	08003155 	.word	0x08003155
 8003110:	08003155 	.word	0x08003155
 8003114:	08003155 	.word	0x08003155
 8003118:	08003149 	.word	0x08003149
 800311c:	08003155 	.word	0x08003155
 8003120:	08003155 	.word	0x08003155
 8003124:	08003155 	.word	0x08003155
 8003128:	08003143 	.word	0x08003143
 800312c:	08003155 	.word	0x08003155
 8003130:	08003155 	.word	0x08003155
 8003134:	08003155 	.word	0x08003155
 8003138:	0800314f 	.word	0x0800314f
 800313c:	2300      	movs	r3, #0
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e117      	b.n	8003372 <UART_SetConfig+0x34e>
 8003142:	2302      	movs	r3, #2
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e114      	b.n	8003372 <UART_SetConfig+0x34e>
 8003148:	2304      	movs	r3, #4
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e111      	b.n	8003372 <UART_SetConfig+0x34e>
 800314e:	2308      	movs	r3, #8
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e10e      	b.n	8003372 <UART_SetConfig+0x34e>
 8003154:	2310      	movs	r3, #16
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	bf00      	nop
 800315a:	e10a      	b.n	8003372 <UART_SetConfig+0x34e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a71      	ldr	r2, [pc, #452]	; (8003328 <UART_SetConfig+0x304>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d120      	bne.n	80031a8 <UART_SetConfig+0x184>
 8003166:	4b6e      	ldr	r3, [pc, #440]	; (8003320 <UART_SetConfig+0x2fc>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003170:	2b10      	cmp	r3, #16
 8003172:	d00f      	beq.n	8003194 <UART_SetConfig+0x170>
 8003174:	2b10      	cmp	r3, #16
 8003176:	d802      	bhi.n	800317e <UART_SetConfig+0x15a>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <UART_SetConfig+0x164>
 800317c:	e010      	b.n	80031a0 <UART_SetConfig+0x17c>
 800317e:	2b20      	cmp	r3, #32
 8003180:	d005      	beq.n	800318e <UART_SetConfig+0x16a>
 8003182:	2b30      	cmp	r3, #48	; 0x30
 8003184:	d009      	beq.n	800319a <UART_SetConfig+0x176>
 8003186:	e00b      	b.n	80031a0 <UART_SetConfig+0x17c>
 8003188:	2300      	movs	r3, #0
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e0f1      	b.n	8003372 <UART_SetConfig+0x34e>
 800318e:	2302      	movs	r3, #2
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e0ee      	b.n	8003372 <UART_SetConfig+0x34e>
 8003194:	2304      	movs	r3, #4
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e0eb      	b.n	8003372 <UART_SetConfig+0x34e>
 800319a:	2308      	movs	r3, #8
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e0e8      	b.n	8003372 <UART_SetConfig+0x34e>
 80031a0:	2310      	movs	r3, #16
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	bf00      	nop
 80031a6:	e0e4      	b.n	8003372 <UART_SetConfig+0x34e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a5f      	ldr	r2, [pc, #380]	; (800332c <UART_SetConfig+0x308>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d120      	bne.n	80031f4 <UART_SetConfig+0x1d0>
 80031b2:	4b5b      	ldr	r3, [pc, #364]	; (8003320 <UART_SetConfig+0x2fc>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d00f      	beq.n	80031e0 <UART_SetConfig+0x1bc>
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d802      	bhi.n	80031ca <UART_SetConfig+0x1a6>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <UART_SetConfig+0x1b0>
 80031c8:	e010      	b.n	80031ec <UART_SetConfig+0x1c8>
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d005      	beq.n	80031da <UART_SetConfig+0x1b6>
 80031ce:	2bc0      	cmp	r3, #192	; 0xc0
 80031d0:	d009      	beq.n	80031e6 <UART_SetConfig+0x1c2>
 80031d2:	e00b      	b.n	80031ec <UART_SetConfig+0x1c8>
 80031d4:	2300      	movs	r3, #0
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e0cb      	b.n	8003372 <UART_SetConfig+0x34e>
 80031da:	2302      	movs	r3, #2
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e0c8      	b.n	8003372 <UART_SetConfig+0x34e>
 80031e0:	2304      	movs	r3, #4
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e0c5      	b.n	8003372 <UART_SetConfig+0x34e>
 80031e6:	2308      	movs	r3, #8
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e0c2      	b.n	8003372 <UART_SetConfig+0x34e>
 80031ec:	2310      	movs	r3, #16
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	bf00      	nop
 80031f2:	e0be      	b.n	8003372 <UART_SetConfig+0x34e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a4d      	ldr	r2, [pc, #308]	; (8003330 <UART_SetConfig+0x30c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d124      	bne.n	8003248 <UART_SetConfig+0x224>
 80031fe:	4b48      	ldr	r3, [pc, #288]	; (8003320 <UART_SetConfig+0x2fc>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320c:	d012      	beq.n	8003234 <UART_SetConfig+0x210>
 800320e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003212:	d802      	bhi.n	800321a <UART_SetConfig+0x1f6>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <UART_SetConfig+0x204>
 8003218:	e012      	b.n	8003240 <UART_SetConfig+0x21c>
 800321a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321e:	d006      	beq.n	800322e <UART_SetConfig+0x20a>
 8003220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003224:	d009      	beq.n	800323a <UART_SetConfig+0x216>
 8003226:	e00b      	b.n	8003240 <UART_SetConfig+0x21c>
 8003228:	2300      	movs	r3, #0
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e0a1      	b.n	8003372 <UART_SetConfig+0x34e>
 800322e:	2302      	movs	r3, #2
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e09e      	b.n	8003372 <UART_SetConfig+0x34e>
 8003234:	2304      	movs	r3, #4
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e09b      	b.n	8003372 <UART_SetConfig+0x34e>
 800323a:	2308      	movs	r3, #8
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e098      	b.n	8003372 <UART_SetConfig+0x34e>
 8003240:	2310      	movs	r3, #16
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	bf00      	nop
 8003246:	e094      	b.n	8003372 <UART_SetConfig+0x34e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a39      	ldr	r2, [pc, #228]	; (8003334 <UART_SetConfig+0x310>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d124      	bne.n	800329c <UART_SetConfig+0x278>
 8003252:	4b33      	ldr	r3, [pc, #204]	; (8003320 <UART_SetConfig+0x2fc>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003260:	d012      	beq.n	8003288 <UART_SetConfig+0x264>
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d802      	bhi.n	800326e <UART_SetConfig+0x24a>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <UART_SetConfig+0x258>
 800326c:	e012      	b.n	8003294 <UART_SetConfig+0x270>
 800326e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003272:	d006      	beq.n	8003282 <UART_SetConfig+0x25e>
 8003274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003278:	d009      	beq.n	800328e <UART_SetConfig+0x26a>
 800327a:	e00b      	b.n	8003294 <UART_SetConfig+0x270>
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e077      	b.n	8003372 <UART_SetConfig+0x34e>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e074      	b.n	8003372 <UART_SetConfig+0x34e>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e071      	b.n	8003372 <UART_SetConfig+0x34e>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e06e      	b.n	8003372 <UART_SetConfig+0x34e>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	bf00      	nop
 800329a:	e06a      	b.n	8003372 <UART_SetConfig+0x34e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a25      	ldr	r2, [pc, #148]	; (8003338 <UART_SetConfig+0x314>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d124      	bne.n	80032f0 <UART_SetConfig+0x2cc>
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <UART_SetConfig+0x2fc>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b4:	d012      	beq.n	80032dc <UART_SetConfig+0x2b8>
 80032b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ba:	d802      	bhi.n	80032c2 <UART_SetConfig+0x29e>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <UART_SetConfig+0x2ac>
 80032c0:	e012      	b.n	80032e8 <UART_SetConfig+0x2c4>
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c6:	d006      	beq.n	80032d6 <UART_SetConfig+0x2b2>
 80032c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032cc:	d009      	beq.n	80032e2 <UART_SetConfig+0x2be>
 80032ce:	e00b      	b.n	80032e8 <UART_SetConfig+0x2c4>
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e04d      	b.n	8003372 <UART_SetConfig+0x34e>
 80032d6:	2302      	movs	r3, #2
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e04a      	b.n	8003372 <UART_SetConfig+0x34e>
 80032dc:	2304      	movs	r3, #4
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e047      	b.n	8003372 <UART_SetConfig+0x34e>
 80032e2:	2308      	movs	r3, #8
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e044      	b.n	8003372 <UART_SetConfig+0x34e>
 80032e8:	2310      	movs	r3, #16
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	bf00      	nop
 80032ee:	e040      	b.n	8003372 <UART_SetConfig+0x34e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a11      	ldr	r2, [pc, #68]	; (800333c <UART_SetConfig+0x318>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d139      	bne.n	800336e <UART_SetConfig+0x34a>
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <UART_SetConfig+0x2fc>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003308:	d027      	beq.n	800335a <UART_SetConfig+0x336>
 800330a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800330e:	d817      	bhi.n	8003340 <UART_SetConfig+0x31c>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01c      	beq.n	800334e <UART_SetConfig+0x32a>
 8003314:	e027      	b.n	8003366 <UART_SetConfig+0x342>
 8003316:	bf00      	nop
 8003318:	efff69f3 	.word	0xefff69f3
 800331c:	40011000 	.word	0x40011000
 8003320:	40023800 	.word	0x40023800
 8003324:	40004400 	.word	0x40004400
 8003328:	40004800 	.word	0x40004800
 800332c:	40004c00 	.word	0x40004c00
 8003330:	40005000 	.word	0x40005000
 8003334:	40011400 	.word	0x40011400
 8003338:	40007800 	.word	0x40007800
 800333c:	40007c00 	.word	0x40007c00
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d006      	beq.n	8003354 <UART_SetConfig+0x330>
 8003346:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800334a:	d009      	beq.n	8003360 <UART_SetConfig+0x33c>
 800334c:	e00b      	b.n	8003366 <UART_SetConfig+0x342>
 800334e:	2300      	movs	r3, #0
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e00e      	b.n	8003372 <UART_SetConfig+0x34e>
 8003354:	2302      	movs	r3, #2
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e00b      	b.n	8003372 <UART_SetConfig+0x34e>
 800335a:	2304      	movs	r3, #4
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e008      	b.n	8003372 <UART_SetConfig+0x34e>
 8003360:	2308      	movs	r3, #8
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e005      	b.n	8003372 <UART_SetConfig+0x34e>
 8003366:	2310      	movs	r3, #16
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	bf00      	nop
 800336c:	e001      	b.n	8003372 <UART_SetConfig+0x34e>
 800336e:	2310      	movs	r3, #16
 8003370:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337a:	d17c      	bne.n	8003476 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800337c:	7ffb      	ldrb	r3, [r7, #31]
 800337e:	2b08      	cmp	r3, #8
 8003380:	d859      	bhi.n	8003436 <UART_SetConfig+0x412>
 8003382:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <UART_SetConfig+0x364>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033cb 	.word	0x080033cb
 8003390:	080033e9 	.word	0x080033e9
 8003394:	08003437 	.word	0x08003437
 8003398:	08003401 	.word	0x08003401
 800339c:	08003437 	.word	0x08003437
 80033a0:	08003437 	.word	0x08003437
 80033a4:	08003437 	.word	0x08003437
 80033a8:	0800341f 	.word	0x0800341f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80033ac:	f7fe fe74 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 80033b0:	4603      	mov	r3, r0
 80033b2:	005a      	lsls	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	441a      	add	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	61bb      	str	r3, [r7, #24]
        break;
 80033c8:	e038      	b.n	800343c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80033ca:	f7fe fe79 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 80033ce:	4603      	mov	r3, r0
 80033d0:	005a      	lsls	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	441a      	add	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	61bb      	str	r3, [r7, #24]
        break;
 80033e6:	e029      	b.n	800343c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	085a      	lsrs	r2, r3, #1
 80033ee:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <UART_SetConfig+0x540>)
 80033f0:	4413      	add	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6852      	ldr	r2, [r2, #4]
 80033f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	61bb      	str	r3, [r7, #24]
        break;
 80033fe:	e01d      	b.n	800343c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003400:	f7fe fd66 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8003404:	4603      	mov	r3, r0
 8003406:	005a      	lsls	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	441a      	add	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	b29b      	uxth	r3, r3
 800341a:	61bb      	str	r3, [r7, #24]
        break;
 800341c:	e00e      	b.n	800343c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	b29b      	uxth	r3, r3
 8003432:	61bb      	str	r3, [r7, #24]
        break;
 8003434:	e002      	b.n	800343c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
        break;
 800343a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b0f      	cmp	r3, #15
 8003440:	d916      	bls.n	8003470 <UART_SetConfig+0x44c>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d212      	bcs.n	8003470 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f023 030f 	bic.w	r3, r3, #15
 8003452:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	b29a      	uxth	r2, r3
 8003460:	89fb      	ldrh	r3, [r7, #14]
 8003462:	4313      	orrs	r3, r2
 8003464:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	89fa      	ldrh	r2, [r7, #14]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	e06e      	b.n	800354e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
 8003474:	e06b      	b.n	800354e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003476:	7ffb      	ldrb	r3, [r7, #31]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d857      	bhi.n	800352c <UART_SetConfig+0x508>
 800347c:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <UART_SetConfig+0x460>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034c5 	.word	0x080034c5
 800348c:	080034e1 	.word	0x080034e1
 8003490:	0800352d 	.word	0x0800352d
 8003494:	080034f9 	.word	0x080034f9
 8003498:	0800352d 	.word	0x0800352d
 800349c:	0800352d 	.word	0x0800352d
 80034a0:	0800352d 	.word	0x0800352d
 80034a4:	08003515 	.word	0x08003515
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034a8:	f7fe fdf6 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	441a      	add	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	61bb      	str	r3, [r7, #24]
        break;
 80034c2:	e036      	b.n	8003532 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80034c4:	f7fe fdfc 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	441a      	add	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	b29b      	uxth	r3, r3
 80034dc:	61bb      	str	r3, [r7, #24]
        break;
 80034de:	e028      	b.n	8003532 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	085a      	lsrs	r2, r3, #1
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <UART_SetConfig+0x544>)
 80034e8:	4413      	add	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6852      	ldr	r2, [r2, #4]
 80034ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	61bb      	str	r3, [r7, #24]
        break;
 80034f6:	e01c      	b.n	8003532 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034f8:	f7fe fcea 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	b29b      	uxth	r3, r3
 8003510:	61bb      	str	r3, [r7, #24]
        break;
 8003512:	e00e      	b.n	8003532 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	61bb      	str	r3, [r7, #24]
        break;
 800352a:	e002      	b.n	8003532 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	75fb      	strb	r3, [r7, #23]
        break;
 8003530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b0f      	cmp	r3, #15
 8003536:	d908      	bls.n	800354a <UART_SetConfig+0x526>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353e:	d204      	bcs.n	800354a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	e001      	b.n	800354e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800355a:	7dfb      	ldrb	r3, [r7, #23]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	01e84800 	.word	0x01e84800
 8003568:	00f42400 	.word	0x00f42400

0800356c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01a      	beq.n	8003682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366a:	d10a      	bne.n	8003682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80036be:	f7fc ffb9 	bl	8000634 <HAL_GetTick>
 80036c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d10e      	bne.n	80036f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f814 	bl	800370e <UART_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e00a      	b.n	8003706 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371e:	e02a      	b.n	8003776 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003726:	d026      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003728:	f7fc ff84 	bl	8000634 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	429a      	cmp	r2, r3
 8003736:	d302      	bcc.n	800373e <UART_WaitOnFlagUntilTimeout+0x30>
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11b      	bne.n	8003776 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800374c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e00f      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	429a      	cmp	r2, r3
 8003792:	d0c5      	beq.n	8003720 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037a0:	b084      	sub	sp, #16
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	f107 001c 	add.w	r0, r7, #28
 80037ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d120      	bne.n	80037fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	4b20      	ldr	r3, [pc, #128]	; (800384c <USB_CoreInit+0xac>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d105      	bne.n	80037ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa60 	bl	8003cb4 <USB_CoreReset>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e010      	b.n	800381c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa54 	bl	8003cb4 <USB_CoreReset>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10b      	bne.n	800383a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f043 0206 	orr.w	r2, r3, #6
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003846:	b004      	add	sp, #16
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	ffbdffbf 	.word	0xffbdffbf

08003850 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 0201 	bic.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d106      	bne.n	800389e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	e00b      	b.n	80038b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	e001      	b.n	80038b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e003      	b.n	80038be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80038b6:	2032      	movs	r0, #50	; 0x32
 80038b8:	f7fc fec8 	bl	800064c <HAL_Delay>

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c8:	b084      	sub	sp, #16
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	e009      	b.n	80038fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	3340      	adds	r3, #64	; 0x40
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	3301      	adds	r3, #1
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b0e      	cmp	r3, #14
 8003900:	d9f2      	bls.n	80038e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d112      	bne.n	800392e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e005      	b.n	800393a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003940:	461a      	mov	r2, r3
 8003942:	2300      	movs	r3, #0
 8003944:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394c:	4619      	mov	r1, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003954:	461a      	mov	r2, r3
 8003956:	680b      	ldr	r3, [r1, #0]
 8003958:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10c      	bne.n	800397a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003966:	2100      	movs	r1, #0
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f971 	bl	8003c50 <USB_SetDevSpeed>
 800396e:	e018      	b.n	80039a2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003970:	2101      	movs	r1, #1
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f96c 	bl	8003c50 <USB_SetDevSpeed>
 8003978:	e013      	b.n	80039a2 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	2b03      	cmp	r3, #3
 800397e:	d10c      	bne.n	800399a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003986:	2100      	movs	r1, #0
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f961 	bl	8003c50 <USB_SetDevSpeed>
 800398e:	e008      	b.n	80039a2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003990:	2101      	movs	r1, #1
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f95c 	bl	8003c50 <USB_SetDevSpeed>
 8003998:	e003      	b.n	80039a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800399a:	2103      	movs	r1, #3
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f957 	bl	8003c50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039a2:	2110      	movs	r1, #16
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f90b 	bl	8003bc0 <USB_FlushTxFifo>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f929 	bl	8003c0c <USB_FlushRxFifo>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	461a      	mov	r2, r3
 80039cc:	2300      	movs	r3, #0
 80039ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d6:	461a      	mov	r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e2:	461a      	mov	r2, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	e043      	b.n	8003a76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a04:	d118      	bne.n	8003a38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	e013      	b.n	8003a4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e008      	b.n	8003a4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a44:	461a      	mov	r2, r3
 8003a46:	2300      	movs	r3, #0
 8003a48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a56:	461a      	mov	r2, r3
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	3301      	adds	r3, #1
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d3b7      	bcc.n	80039ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	e043      	b.n	8003b0c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a9a:	d118      	bne.n	8003ace <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e013      	b.n	8003ae0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	e008      	b.n	8003ae0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	461a      	mov	r2, r3
 8003adc:	2300      	movs	r3, #0
 8003ade:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aec:	461a      	mov	r2, r3
 8003aee:	2300      	movs	r3, #0
 8003af0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afe:	461a      	mov	r2, r3
 8003b00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3b7      	bcc.n	8003a84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b26:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d110      	bne.n	8003b50 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <USB_DevInit+0x2e8>)
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <USB_DevInit+0x2ec>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f043 0210 	orr.w	r2, r3, #16
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <USB_DevInit+0x2f0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f043 0208 	orr.w	r2, r3, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699a      	ldr	r2, [r3, #24]
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <USB_DevInit+0x2f4>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bac:	b004      	add	sp, #16
 8003bae:	4770      	bx	lr
 8003bb0:	00800100 	.word	0x00800100
 8003bb4:	00010003 	.word	0x00010003
 8003bb8:	803c3800 	.word	0x803c3800
 8003bbc:	40000004 	.word	0x40000004

08003bc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	019b      	lsls	r3, r3, #6
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <USB_FlushTxFifo+0x48>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e006      	b.n	8003bfa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d0f0      	beq.n	8003bda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	00030d40 	.word	0x00030d40

08003c0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3301      	adds	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <USB_FlushRxFifo+0x40>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e006      	b.n	8003c3e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d0f0      	beq.n	8003c1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	00030d40 	.word	0x00030d40

08003c50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003ca2:	2003      	movs	r0, #3
 8003ca4:	f7fc fcd2 	bl	800064c <HAL_Delay>

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <USB_CoreReset+0x64>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e01b      	b.n	8003d0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	daf2      	bge.n	8003cc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <USB_CoreReset+0x64>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e006      	b.n	8003d0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d0f0      	beq.n	8003cea <USB_CoreReset+0x36>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	00030d40 	.word	0x00030d40

08003d1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f103 0208 	add.w	r2, r3, #8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f103 0208 	add.w	r2, r3, #8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f103 0208 	add.w	r2, r3, #8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	601a      	str	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6892      	ldr	r2, [r2, #8]
 8003dd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6852      	ldr	r2, [r2, #4]
 8003dde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d103      	bne.n	8003df2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	1e5a      	subs	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08c      	sub	sp, #48	; 0x30
 8003e16:	af04      	add	r7, sp, #16
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fdde 	bl	80049e8 <pvPortMalloc>
 8003e2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e34:	2054      	movs	r0, #84	; 0x54
 8003e36:	f000 fdd7 	bl	80049e8 <pvPortMalloc>
 8003e3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
 8003e48:	e005      	b.n	8003e56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f000 fe94 	bl	8004b78 <vPortFree>
 8003e50:	e001      	b.n	8003e56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9303      	str	r3, [sp, #12]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	9302      	str	r3, [sp, #8]
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f80e 	bl	8003e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e78:	69f8      	ldr	r0, [r7, #28]
 8003e7a:	f000 f88b 	bl	8003f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e002      	b.n	8003e8a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003eac:	440b      	add	r3, r1
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	b672      	cpsid	i
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	b662      	cpsie	i
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e7fe      	b.n	8003edc <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	e012      	b.n	8003f0a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	7819      	ldrb	r1, [r3, #0]
 8003eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3334      	adds	r3, #52	; 0x34
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d006      	beq.n	8003f12 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	3301      	adds	r3, #1
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2b0f      	cmp	r3, #15
 8003f0e:	d9e9      	bls.n	8003ee4 <prvInitialiseNewTask+0x50>
 8003f10:	e000      	b.n	8003f14 <prvInitialiseNewTask+0x80>
		{
			break;
 8003f12:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d901      	bls.n	8003f26 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f22:	2306      	movs	r3, #6
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	2200      	movs	r2, #0
 8003f36:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff0d 	bl	8003d5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	3318      	adds	r3, #24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff08 	bl	8003d5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	f1c3 0207 	rsb	r2, r3, #7
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	2200      	movs	r2, #0
 8003f66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	69b8      	ldr	r0, [r7, #24]
 8003f76:	f000 fb51 	bl	800461c <pxPortInitialiseStack>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f8c:	bf00      	nop
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f9c:	f000 fc44 	bl	8004828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fa0:	4b2a      	ldr	r3, [pc, #168]	; (800404c <prvAddNewTaskToReadyList+0xb8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	4a29      	ldr	r2, [pc, #164]	; (800404c <prvAddNewTaskToReadyList+0xb8>)
 8003fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003faa:	4b29      	ldr	r3, [pc, #164]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fb2:	4a27      	ldr	r2, [pc, #156]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fb8:	4b24      	ldr	r3, [pc, #144]	; (800404c <prvAddNewTaskToReadyList+0xb8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d110      	bne.n	8003fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fc0:	f000 fa8a 	bl	80044d8 <prvInitialiseTaskLists>
 8003fc4:	e00d      	b.n	8003fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fc6:	4b23      	ldr	r3, [pc, #140]	; (8004054 <prvAddNewTaskToReadyList+0xc0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d802      	bhi.n	8003fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <prvAddNewTaskToReadyList+0xc4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <prvAddNewTaskToReadyList+0xc4>)
 8003fea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <prvAddNewTaskToReadyList+0xc8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	4a18      	ldr	r2, [pc, #96]	; (800405c <prvAddNewTaskToReadyList+0xc8>)
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <prvAddNewTaskToReadyList+0xcc>)
 800400c:	441a      	add	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f7ff feae 	bl	8003d76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800401a:	f000 fc37 	bl	800488c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <prvAddNewTaskToReadyList+0xc0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	429a      	cmp	r2, r3
 8004032:	d207      	bcs.n	8004044 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <prvAddNewTaskToReadyList+0xd0>)
 8004036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	2000018c 	.word	0x2000018c
 8004050:	2000008c 	.word	0x2000008c
 8004054:	20000198 	.word	0x20000198
 8004058:	200001a8 	.word	0x200001a8
 800405c:	20000194 	.word	0x20000194
 8004060:	20000090 	.word	0x20000090
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <vTaskStartScheduler+0x7c>)
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	2300      	movs	r3, #0
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	2300      	movs	r3, #0
 8004078:	2280      	movs	r2, #128	; 0x80
 800407a:	491b      	ldr	r1, [pc, #108]	; (80040e8 <vTaskStartScheduler+0x80>)
 800407c:	481b      	ldr	r0, [pc, #108]	; (80040ec <vTaskStartScheduler+0x84>)
 800407e:	f7ff fec8 	bl	8003e12 <xTaskCreate>
 8004082:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d117      	bne.n	80040ba <vTaskStartScheduler+0x52>
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	b672      	cpsid	i
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	b662      	cpsie	i
 800409e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040a0:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <vTaskStartScheduler+0x88>)
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <vTaskStartScheduler+0x8c>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <vTaskStartScheduler+0x90>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040b4:	f000 fb3c 	bl	8004730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040b8:	e00f      	b.n	80040da <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c0:	d10b      	bne.n	80040da <vTaskStartScheduler+0x72>
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	b672      	cpsid	i
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	b662      	cpsie	i
 80040d6:	607b      	str	r3, [r7, #4]
 80040d8:	e7fe      	b.n	80040d8 <vTaskStartScheduler+0x70>
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200001b0 	.word	0x200001b0
 80040e8:	080060b4 	.word	0x080060b4
 80040ec:	080044a9 	.word	0x080044a9
 80040f0:	200001ac 	.word	0x200001ac
 80040f4:	20000198 	.word	0x20000198
 80040f8:	20000190 	.word	0x20000190

080040fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <vTaskSuspendAll+0x18>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	4a03      	ldr	r2, [pc, #12]	; (8004114 <vTaskSuspendAll+0x18>)
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	200001b4 	.word	0x200001b4

08004118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004126:	4b42      	ldr	r3, [pc, #264]	; (8004230 <xTaskResumeAll+0x118>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <xTaskResumeAll+0x2e>
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	b672      	cpsid	i
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	b662      	cpsie	i
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	e7fe      	b.n	8004144 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004146:	f000 fb6f 	bl	8004828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800414a:	4b39      	ldr	r3, [pc, #228]	; (8004230 <xTaskResumeAll+0x118>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3b01      	subs	r3, #1
 8004150:	4a37      	ldr	r2, [pc, #220]	; (8004230 <xTaskResumeAll+0x118>)
 8004152:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004154:	4b36      	ldr	r3, [pc, #216]	; (8004230 <xTaskResumeAll+0x118>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d161      	bne.n	8004220 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800415c:	4b35      	ldr	r3, [pc, #212]	; (8004234 <xTaskResumeAll+0x11c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05d      	beq.n	8004220 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004164:	e02e      	b.n	80041c4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004166:	4b34      	ldr	r3, [pc, #208]	; (8004238 <xTaskResumeAll+0x120>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3318      	adds	r3, #24
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fe23 	bl	8003dbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fe1e 	bl	8003dbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	2201      	movs	r2, #1
 8004188:	409a      	lsls	r2, r3
 800418a:	4b2c      	ldr	r3, [pc, #176]	; (800423c <xTaskResumeAll+0x124>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	4a2a      	ldr	r2, [pc, #168]	; (800423c <xTaskResumeAll+0x124>)
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4a27      	ldr	r2, [pc, #156]	; (8004240 <xTaskResumeAll+0x128>)
 80041a2:	441a      	add	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f7ff fde3 	bl	8003d76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4b23      	ldr	r3, [pc, #140]	; (8004244 <xTaskResumeAll+0x12c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <xTaskResumeAll+0x130>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c4:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <xTaskResumeAll+0x120>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1cc      	bne.n	8004166 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041d2:	f000 f9fd 	bl	80045d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <xTaskResumeAll+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041e2:	f000 f847 	bl	8004274 <xTaskIncrementTick>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041ec:	4b16      	ldr	r3, [pc, #88]	; (8004248 <xTaskResumeAll+0x130>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f1      	bne.n	80041e2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <xTaskResumeAll+0x134>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004204:	4b10      	ldr	r3, [pc, #64]	; (8004248 <xTaskResumeAll+0x130>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004210:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <xTaskResumeAll+0x138>)
 8004212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004220:	f000 fb34 	bl	800488c <vPortExitCritical>

	return xAlreadyYielded;
 8004224:	68bb      	ldr	r3, [r7, #8]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	200001b4 	.word	0x200001b4
 8004234:	2000018c 	.word	0x2000018c
 8004238:	2000014c 	.word	0x2000014c
 800423c:	20000194 	.word	0x20000194
 8004240:	20000090 	.word	0x20000090
 8004244:	2000008c 	.word	0x2000008c
 8004248:	200001a0 	.word	0x200001a0
 800424c:	2000019c 	.word	0x2000019c
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <xTaskGetTickCount+0x1c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004260:	687b      	ldr	r3, [r7, #4]
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000190 	.word	0x20000190

08004274 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427e:	4b51      	ldr	r3, [pc, #324]	; (80043c4 <xTaskIncrementTick+0x150>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 808e 	bne.w	80043a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004288:	4b4f      	ldr	r3, [pc, #316]	; (80043c8 <xTaskIncrementTick+0x154>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004290:	4a4d      	ldr	r2, [pc, #308]	; (80043c8 <xTaskIncrementTick+0x154>)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d121      	bne.n	80042e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800429c:	4b4b      	ldr	r3, [pc, #300]	; (80043cc <xTaskIncrementTick+0x158>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <xTaskIncrementTick+0x4a>
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	b672      	cpsid	i
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	b662      	cpsie	i
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	e7fe      	b.n	80042bc <xTaskIncrementTick+0x48>
 80042be:	4b43      	ldr	r3, [pc, #268]	; (80043cc <xTaskIncrementTick+0x158>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <xTaskIncrementTick+0x15c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a40      	ldr	r2, [pc, #256]	; (80043cc <xTaskIncrementTick+0x158>)
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4a40      	ldr	r2, [pc, #256]	; (80043d0 <xTaskIncrementTick+0x15c>)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b40      	ldr	r3, [pc, #256]	; (80043d4 <xTaskIncrementTick+0x160>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3301      	adds	r3, #1
 80042d8:	4a3e      	ldr	r2, [pc, #248]	; (80043d4 <xTaskIncrementTick+0x160>)
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	f000 f978 	bl	80045d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042e0:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <xTaskIncrementTick+0x164>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d34d      	bcc.n	8004386 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ea:	4b38      	ldr	r3, [pc, #224]	; (80043cc <xTaskIncrementTick+0x158>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <xTaskIncrementTick+0x84>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <xTaskIncrementTick+0x86>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <xTaskIncrementTick+0x164>)
 8004300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004304:	601a      	str	r2, [r3, #0]
					break;
 8004306:	e03e      	b.n	8004386 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004308:	4b30      	ldr	r3, [pc, #192]	; (80043cc <xTaskIncrementTick+0x158>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	429a      	cmp	r2, r3
 800431e:	d203      	bcs.n	8004328 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004320:	4a2d      	ldr	r2, [pc, #180]	; (80043d8 <xTaskIncrementTick+0x164>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6013      	str	r3, [r2, #0]
						break;
 8004326:	e02e      	b.n	8004386 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	3304      	adds	r3, #4
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fd46 	bl	8003dbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	2b00      	cmp	r3, #0
 8004338:	d004      	beq.n	8004344 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3318      	adds	r3, #24
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fd3d 	bl	8003dbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	2201      	movs	r2, #1
 800434a:	409a      	lsls	r2, r3
 800434c:	4b23      	ldr	r3, [pc, #140]	; (80043dc <xTaskIncrementTick+0x168>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4313      	orrs	r3, r2
 8004352:	4a22      	ldr	r2, [pc, #136]	; (80043dc <xTaskIncrementTick+0x168>)
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <xTaskIncrementTick+0x16c>)
 8004364:	441a      	add	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7ff fd02 	bl	8003d76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004376:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <xTaskIncrementTick+0x170>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	429a      	cmp	r2, r3
 800437e:	d3b4      	bcc.n	80042ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004380:	2301      	movs	r3, #1
 8004382:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004384:	e7b1      	b.n	80042ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <xTaskIncrementTick+0x170>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	4914      	ldr	r1, [pc, #80]	; (80043e0 <xTaskIncrementTick+0x16c>)
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d907      	bls.n	80043ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800439e:	2301      	movs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e004      	b.n	80043ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80043a4:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <xTaskIncrementTick+0x174>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <xTaskIncrementTick+0x174>)
 80043ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <xTaskIncrementTick+0x178>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80043ba:	697b      	ldr	r3, [r7, #20]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200001b4 	.word	0x200001b4
 80043c8:	20000190 	.word	0x20000190
 80043cc:	20000144 	.word	0x20000144
 80043d0:	20000148 	.word	0x20000148
 80043d4:	200001a4 	.word	0x200001a4
 80043d8:	200001ac 	.word	0x200001ac
 80043dc:	20000194 	.word	0x20000194
 80043e0:	20000090 	.word	0x20000090
 80043e4:	2000008c 	.word	0x2000008c
 80043e8:	2000019c 	.word	0x2000019c
 80043ec:	200001a0 	.word	0x200001a0

080043f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <vTaskSwitchContext+0xa4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043fe:	4b26      	ldr	r3, [pc, #152]	; (8004498 <vTaskSwitchContext+0xa8>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004404:	e040      	b.n	8004488 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <vTaskSwitchContext+0xa8>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800440c:	4b23      	ldr	r3, [pc, #140]	; (800449c <vTaskSwitchContext+0xac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	fab3 f383 	clz	r3, r3
 8004418:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800441a:	7afb      	ldrb	r3, [r7, #11]
 800441c:	f1c3 031f 	rsb	r3, r3, #31
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	491f      	ldr	r1, [pc, #124]	; (80044a0 <vTaskSwitchContext+0xb0>)
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	b672      	cpsid	i
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	b662      	cpsie	i
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	e7fe      	b.n	800444c <vTaskSwitchContext+0x5c>
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <vTaskSwitchContext+0xb0>)
 800445a:	4413      	add	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	3308      	adds	r3, #8
 8004470:	429a      	cmp	r2, r3
 8004472:	d104      	bne.n	800447e <vTaskSwitchContext+0x8e>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a07      	ldr	r2, [pc, #28]	; (80044a4 <vTaskSwitchContext+0xb4>)
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	200001b4 	.word	0x200001b4
 8004498:	200001a0 	.word	0x200001a0
 800449c:	20000194 	.word	0x20000194
 80044a0:	20000090 	.word	0x20000090
 80044a4:	2000008c 	.word	0x2000008c

080044a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044b0:	f000 f852 	bl	8004558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <prvIdleTask+0x28>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d9f9      	bls.n	80044b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <prvIdleTask+0x2c>)
 80044be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044cc:	e7f0      	b.n	80044b0 <prvIdleTask+0x8>
 80044ce:	bf00      	nop
 80044d0:	20000090 	.word	0x20000090
 80044d4:	e000ed04 	.word	0xe000ed04

080044d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	e00c      	b.n	80044fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4a12      	ldr	r2, [pc, #72]	; (8004538 <prvInitialiseTaskLists+0x60>)
 80044f0:	4413      	add	r3, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fc12 	bl	8003d1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3301      	adds	r3, #1
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b06      	cmp	r3, #6
 8004502:	d9ef      	bls.n	80044e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004504:	480d      	ldr	r0, [pc, #52]	; (800453c <prvInitialiseTaskLists+0x64>)
 8004506:	f7ff fc09 	bl	8003d1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800450a:	480d      	ldr	r0, [pc, #52]	; (8004540 <prvInitialiseTaskLists+0x68>)
 800450c:	f7ff fc06 	bl	8003d1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004510:	480c      	ldr	r0, [pc, #48]	; (8004544 <prvInitialiseTaskLists+0x6c>)
 8004512:	f7ff fc03 	bl	8003d1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004516:	480c      	ldr	r0, [pc, #48]	; (8004548 <prvInitialiseTaskLists+0x70>)
 8004518:	f7ff fc00 	bl	8003d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800451c:	480b      	ldr	r0, [pc, #44]	; (800454c <prvInitialiseTaskLists+0x74>)
 800451e:	f7ff fbfd 	bl	8003d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <prvInitialiseTaskLists+0x78>)
 8004524:	4a05      	ldr	r2, [pc, #20]	; (800453c <prvInitialiseTaskLists+0x64>)
 8004526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <prvInitialiseTaskLists+0x7c>)
 800452a:	4a05      	ldr	r2, [pc, #20]	; (8004540 <prvInitialiseTaskLists+0x68>)
 800452c:	601a      	str	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000090 	.word	0x20000090
 800453c:	2000011c 	.word	0x2000011c
 8004540:	20000130 	.word	0x20000130
 8004544:	2000014c 	.word	0x2000014c
 8004548:	20000160 	.word	0x20000160
 800454c:	20000178 	.word	0x20000178
 8004550:	20000144 	.word	0x20000144
 8004554:	20000148 	.word	0x20000148

08004558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800455e:	e019      	b.n	8004594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004560:	f000 f962 	bl	8004828 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <prvCheckTasksWaitingTermination+0x4c>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fc24 	bl	8003dbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <prvCheckTasksWaitingTermination+0x50>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3b01      	subs	r3, #1
 800457c:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <prvCheckTasksWaitingTermination+0x50>)
 800457e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <prvCheckTasksWaitingTermination+0x54>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3b01      	subs	r3, #1
 8004586:	4a09      	ldr	r2, [pc, #36]	; (80045ac <prvCheckTasksWaitingTermination+0x54>)
 8004588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800458a:	f000 f97f 	bl	800488c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f80e 	bl	80045b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <prvCheckTasksWaitingTermination+0x54>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e1      	bne.n	8004560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000160 	.word	0x20000160
 80045a8:	2000018c 	.word	0x2000018c
 80045ac:	20000174 	.word	0x20000174

080045b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fadb 	bl	8004b78 <vPortFree>
			vPortFree( pxTCB );
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fad8 	bl	8004b78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <prvResetNextTaskUnblockTime+0x44>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <prvResetNextTaskUnblockTime+0x14>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <prvResetNextTaskUnblockTime+0x16>
 80045e4:	2300      	movs	r3, #0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <prvResetNextTaskUnblockTime+0x48>)
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045f2:	e008      	b.n	8004606 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045f4:	4b07      	ldr	r3, [pc, #28]	; (8004614 <prvResetNextTaskUnblockTime+0x44>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4a05      	ldr	r2, [pc, #20]	; (8004618 <prvResetNextTaskUnblockTime+0x48>)
 8004604:	6013      	str	r3, [r2, #0]
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000144 	.word	0x20000144
 8004618:	200001ac 	.word	0x200001ac

0800461c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3b04      	subs	r3, #4
 800462c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b04      	subs	r3, #4
 800463a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f023 0201 	bic.w	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3b04      	subs	r3, #4
 800464a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800464c:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <pxPortInitialiseStack+0x64>)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b14      	subs	r3, #20
 8004656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3b04      	subs	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f06f 0202 	mvn.w	r2, #2
 800466a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3b20      	subs	r3, #32
 8004670:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004672:	68fb      	ldr	r3, [r7, #12]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	08004685 	.word	0x08004685

08004684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <prvTaskExitError+0x58>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004696:	d00b      	beq.n	80046b0 <prvTaskExitError+0x2c>
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	b672      	cpsid	i
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	b662      	cpsie	i
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e7fe      	b.n	80046ae <prvTaskExitError+0x2a>
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	b672      	cpsid	i
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	b662      	cpsie	i
 80046c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046c6:	bf00      	nop
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0fc      	beq.n	80046c8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000004 	.word	0x20000004

080046e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <pxCurrentTCBConst2>)
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	6808      	ldr	r0, [r1, #0]
 80046e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	f380 8809 	msr	PSP, r0
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8811 	msr	BASEPRI, r0
 80046fa:	4770      	bx	lr
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst2>:
 8004700:	2000008c 	.word	0x2000008c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004708:	4808      	ldr	r0, [pc, #32]	; (800472c <prvPortStartFirstTask+0x24>)
 800470a:	6800      	ldr	r0, [r0, #0]
 800470c:	6800      	ldr	r0, [r0, #0]
 800470e:	f380 8808 	msr	MSP, r0
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8814 	msr	CONTROL, r0
 800471a:	b662      	cpsie	i
 800471c:	b661      	cpsie	f
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	df00      	svc	0
 8004728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800472a:	bf00      	nop
 800472c:	e000ed08 	.word	0xe000ed08

08004730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004736:	4b36      	ldr	r3, [pc, #216]	; (8004810 <xPortStartScheduler+0xe0>)
 8004738:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	22ff      	movs	r2, #255	; 0xff
 8004746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004758:	b2da      	uxtb	r2, r3
 800475a:	4b2e      	ldr	r3, [pc, #184]	; (8004814 <xPortStartScheduler+0xe4>)
 800475c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <xPortStartScheduler+0xe8>)
 8004760:	2207      	movs	r2, #7
 8004762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004764:	e009      	b.n	800477a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004766:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <xPortStartScheduler+0xe8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3b01      	subs	r3, #1
 800476c:	4a2a      	ldr	r2, [pc, #168]	; (8004818 <xPortStartScheduler+0xe8>)
 800476e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d0ef      	beq.n	8004766 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <xPortStartScheduler+0xe8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1c3 0307 	rsb	r3, r3, #7
 800478e:	2b04      	cmp	r3, #4
 8004790:	d00b      	beq.n	80047aa <xPortStartScheduler+0x7a>
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	b672      	cpsid	i
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	b662      	cpsie	i
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	e7fe      	b.n	80047a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <xPortStartScheduler+0xe8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	4a19      	ldr	r2, [pc, #100]	; (8004818 <xPortStartScheduler+0xe8>)
 80047b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047b4:	4b18      	ldr	r3, [pc, #96]	; (8004818 <xPortStartScheduler+0xe8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047bc:	4a16      	ldr	r2, [pc, #88]	; (8004818 <xPortStartScheduler+0xe8>)
 80047be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <xPortStartScheduler+0xec>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <xPortStartScheduler+0xec>)
 80047ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047d4:	4b11      	ldr	r3, [pc, #68]	; (800481c <xPortStartScheduler+0xec>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a10      	ldr	r2, [pc, #64]	; (800481c <xPortStartScheduler+0xec>)
 80047da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047e0:	f000 f8d4 	bl	800498c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <xPortStartScheduler+0xf0>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047ea:	f000 f8f3 	bl	80049d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <xPortStartScheduler+0xf4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <xPortStartScheduler+0xf4>)
 80047f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047fa:	f7ff ff85 	bl	8004708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047fe:	f7ff fdf7 	bl	80043f0 <vTaskSwitchContext>
	prvTaskExitError();
 8004802:	f7ff ff3f 	bl	8004684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	e000e400 	.word	0xe000e400
 8004814:	200001b8 	.word	0x200001b8
 8004818:	200001bc 	.word	0x200001bc
 800481c:	e000ed20 	.word	0xe000ed20
 8004820:	20000004 	.word	0x20000004
 8004824:	e000ef34 	.word	0xe000ef34

08004828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	b672      	cpsid	i
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	b662      	cpsie	i
 8004842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <vPortEnterCritical+0x5c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3301      	adds	r3, #1
 800484a:	4a0e      	ldr	r2, [pc, #56]	; (8004884 <vPortEnterCritical+0x5c>)
 800484c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <vPortEnterCritical+0x5c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d110      	bne.n	8004878 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <vPortEnterCritical+0x60>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <vPortEnterCritical+0x50>
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	b672      	cpsid	i
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	b662      	cpsie	i
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	e7fe      	b.n	8004876 <vPortEnterCritical+0x4e>
	}
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000004 	.word	0x20000004
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <vPortExitCritical+0x50>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <vPortExitCritical+0x26>
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	b672      	cpsid	i
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	b662      	cpsie	i
 80048ae:	607b      	str	r3, [r7, #4]
 80048b0:	e7fe      	b.n	80048b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80048b2:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <vPortExitCritical+0x50>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	4a08      	ldr	r2, [pc, #32]	; (80048dc <vPortExitCritical+0x50>)
 80048ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <vPortExitCritical+0x50>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <vPortExitCritical+0x42>
 80048c4:	2300      	movs	r3, #0
 80048c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000004 	.word	0x20000004

080048e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048e0:	f3ef 8009 	mrs	r0, PSP
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <pxCurrentTCBConst>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	f01e 0f10 	tst.w	lr, #16
 80048f0:	bf08      	it	eq
 80048f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fa:	6010      	str	r0, [r2, #0]
 80048fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004904:	b672      	cpsid	i
 8004906:	f380 8811 	msr	BASEPRI, r0
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	b662      	cpsie	i
 8004914:	f7ff fd6c 	bl	80043f0 <vTaskSwitchContext>
 8004918:	f04f 0000 	mov.w	r0, #0
 800491c:	f380 8811 	msr	BASEPRI, r0
 8004920:	bc09      	pop	{r0, r3}
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	6808      	ldr	r0, [r1, #0]
 8004926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	f01e 0f10 	tst.w	lr, #16
 800492e:	bf08      	it	eq
 8004930:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004934:	f380 8809 	msr	PSP, r0
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <pxCurrentTCBConst>:
 8004940:	2000008c 	.word	0x2000008c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop

08004948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	b672      	cpsid	i
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	b662      	cpsie	i
 8004962:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004964:	f7ff fc86 	bl	8004274 <xTaskIncrementTick>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <SysTick_Handler+0x40>)
 8004970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	2300      	movs	r3, #0
 8004978:	603b      	str	r3, [r7, #0]
	__asm volatile
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <vPortSetupTimerInterrupt+0x34>)
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <vPortSetupTimerInterrupt+0x38>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <vPortSetupTimerInterrupt+0x3c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <vPortSetupTimerInterrupt+0x40>)
 80049a2:	fba2 2303 	umull	r2, r3, r2, r3
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <vPortSetupTimerInterrupt+0x44>)
 80049aa:	3b01      	subs	r3, #1
 80049ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ae:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <vPortSetupTimerInterrupt+0x34>)
 80049b0:	2207      	movs	r2, #7
 80049b2:	601a      	str	r2, [r3, #0]
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	e000e010 	.word	0xe000e010
 80049c4:	e000e018 	.word	0xe000e018
 80049c8:	20000008 	.word	0x20000008
 80049cc:	10624dd3 	.word	0x10624dd3
 80049d0:	e000e014 	.word	0xe000e014

080049d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049e4 <vPortEnableVFP+0x10>
 80049d8:	6801      	ldr	r1, [r0, #0]
 80049da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049de:	6001      	str	r1, [r0, #0]
 80049e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049e2:	bf00      	nop
 80049e4:	e000ed88 	.word	0xe000ed88

080049e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049f4:	f7ff fb82 	bl	80040fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049f8:	4b5a      	ldr	r3, [pc, #360]	; (8004b64 <pvPortMalloc+0x17c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a00:	f000 f916 	bl	8004c30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a04:	4b58      	ldr	r3, [pc, #352]	; (8004b68 <pvPortMalloc+0x180>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 8090 	bne.w	8004b32 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01e      	beq.n	8004a56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a18:	2208      	movs	r2, #8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d015      	beq.n	8004a56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f023 0307 	bic.w	r3, r3, #7
 8004a30:	3308      	adds	r3, #8
 8004a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <pvPortMalloc+0x6e>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	b672      	cpsid	i
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	b662      	cpsie	i
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e7fe      	b.n	8004a54 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d06a      	beq.n	8004b32 <pvPortMalloc+0x14a>
 8004a5c:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <pvPortMalloc+0x184>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d865      	bhi.n	8004b32 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a66:	4b42      	ldr	r3, [pc, #264]	; (8004b70 <pvPortMalloc+0x188>)
 8004a68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a6a:	4b41      	ldr	r3, [pc, #260]	; (8004b70 <pvPortMalloc+0x188>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a70:	e004      	b.n	8004a7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d903      	bls.n	8004a8e <pvPortMalloc+0xa6>
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f1      	bne.n	8004a72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a8e:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <pvPortMalloc+0x17c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d04c      	beq.n	8004b32 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	4413      	add	r3, r2
 8004aa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	1ad2      	subs	r2, r2, r3
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d920      	bls.n	8004afc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4413      	add	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00b      	beq.n	8004ae4 <pvPortMalloc+0xfc>
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	b672      	cpsid	i
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	b662      	cpsie	i
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	e7fe      	b.n	8004ae2 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004af6:	69b8      	ldr	r0, [r7, #24]
 8004af8:	f000 f8fc 	bl	8004cf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <pvPortMalloc+0x184>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	4a19      	ldr	r2, [pc, #100]	; (8004b6c <pvPortMalloc+0x184>)
 8004b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b0a:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <pvPortMalloc+0x184>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <pvPortMalloc+0x18c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d203      	bcs.n	8004b1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <pvPortMalloc+0x184>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <pvPortMalloc+0x18c>)
 8004b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <pvPortMalloc+0x180>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b32:	f7ff faf1 	bl	8004118 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00b      	beq.n	8004b58 <pvPortMalloc+0x170>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	b672      	cpsid	i
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	b662      	cpsie	i
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e7fe      	b.n	8004b56 <pvPortMalloc+0x16e>
	return pvReturn;
 8004b58:	69fb      	ldr	r3, [r7, #28]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3728      	adds	r7, #40	; 0x28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20003dc8 	.word	0x20003dc8
 8004b68:	20003dd4 	.word	0x20003dd4
 8004b6c:	20003dcc 	.word	0x20003dcc
 8004b70:	20003dc0 	.word	0x20003dc0
 8004b74:	20003dd0 	.word	0x20003dd0

08004b78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d04a      	beq.n	8004c20 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	425b      	negs	r3, r3
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4413      	add	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <vPortFree+0xb0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <vPortFree+0x46>
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	b672      	cpsid	i
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	b662      	cpsie	i
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	e7fe      	b.n	8004bbc <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00b      	beq.n	8004bde <vPortFree+0x66>
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	b672      	cpsid	i
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	b662      	cpsie	i
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	e7fe      	b.n	8004bdc <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <vPortFree+0xb0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d019      	beq.n	8004c20 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d115      	bne.n	8004c20 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <vPortFree+0xb0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c04:	f7ff fa7a 	bl	80040fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <vPortFree+0xb4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4413      	add	r3, r2
 8004c12:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <vPortFree+0xb4>)
 8004c14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c16:	6938      	ldr	r0, [r7, #16]
 8004c18:	f000 f86c 	bl	8004cf4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c1c:	f7ff fa7c 	bl	8004118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c20:	bf00      	nop
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20003dd4 	.word	0x20003dd4
 8004c2c:	20003dcc 	.word	0x20003dcc

08004c30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c36:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c3c:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <prvHeapInit+0xac>)
 8004c3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00c      	beq.n	8004c64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3307      	adds	r3, #7
 8004c4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0307 	bic.w	r3, r3, #7
 8004c56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <prvHeapInit+0xac>)
 8004c60:	4413      	add	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c68:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <prvHeapInit+0xb0>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <prvHeapInit+0xb0>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4413      	add	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0307 	bic.w	r3, r3, #7
 8004c8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <prvHeapInit+0xb4>)
 8004c90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <prvHeapInit+0xb4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <prvHeapInit+0xb4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	1ad2      	subs	r2, r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <prvHeapInit+0xb4>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <prvHeapInit+0xb8>)
 8004cbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <prvHeapInit+0xbc>)
 8004cc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cc8:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <prvHeapInit+0xc0>)
 8004cca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cce:	601a      	str	r2, [r3, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	200001c0 	.word	0x200001c0
 8004ce0:	20003dc0 	.word	0x20003dc0
 8004ce4:	20003dc8 	.word	0x20003dc8
 8004ce8:	20003dd0 	.word	0x20003dd0
 8004cec:	20003dcc 	.word	0x20003dcc
 8004cf0:	20003dd4 	.word	0x20003dd4

08004cf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cfc:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <prvInsertBlockIntoFreeList+0xac>)
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e002      	b.n	8004d08 <prvInsertBlockIntoFreeList+0x14>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d8f7      	bhi.n	8004d02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d108      	bne.n	8004d36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	441a      	add	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	441a      	add	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d118      	bne.n	8004d7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <prvInsertBlockIntoFreeList+0xb0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d00d      	beq.n	8004d72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	e008      	b.n	8004d84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d72:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <prvInsertBlockIntoFreeList+0xb0>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e003      	b.n	8004d84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d002      	beq.n	8004d92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20003dc0 	.word	0x20003dc0
 8004da4:	20003dc8 	.word	0x20003dc8

08004da8 <main>:
void rtos_delay(uint32_t delay_in_ms);
void printmsg(char *msg);

char usr_msg[100];

int main(void){
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af02      	add	r7, sp, #8
	//initialise_monitor_handles();
  HAL_Init();
 8004dae:	f7fb fc1f 	bl	80005f0 <HAL_Init>
  SystemClock_Config();
 8004db2:	f000 f8a3 	bl	8004efc <SystemClock_Config>
  MX_GPIO_Init();
 8004db6:	f000 f9cb 	bl	8005150 <MX_GPIO_Init>
  MX_ETH_Init();
 8004dba:	f000 f935 	bl	8005028 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8004dbe:	f000 f969 	bl	8005094 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004dc2:	f000 f997 	bl	80050f4 <MX_USB_OTG_FS_PCD_Init>
  // osKernelStart();

  //xTaskCreate(vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 1, &xTaskHandle1 );
  //xTaskCreate(vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 1, &xTaskHandle2 );

  xTaskCreate(vTask1_handler, "Task-1", 500, NULL, 2, &xTaskHandle1 );
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <main+0x50>)
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	2302      	movs	r3, #2
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004dd4:	4909      	ldr	r1, [pc, #36]	; (8004dfc <main+0x54>)
 8004dd6:	480a      	ldr	r0, [pc, #40]	; (8004e00 <main+0x58>)
 8004dd8:	f7ff f81b 	bl	8003e12 <xTaskCreate>
  xTaskCreate(vTask2_handler, "Task-2", 500, NULL, 2, &xTaskHandle2 );
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <main+0x5c>)
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	2302      	movs	r3, #2
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004dea:	4907      	ldr	r1, [pc, #28]	; (8004e08 <main+0x60>)
 8004dec:	4807      	ldr	r0, [pc, #28]	; (8004e0c <main+0x64>)
 8004dee:	f7ff f810 	bl	8003e12 <xTaskCreate>
  vTaskStartScheduler();
 8004df2:	f7ff f939 	bl	8004068 <vTaskStartScheduler>
  
  while(1);
 8004df6:	e7fe      	b.n	8004df6 <main+0x4e>
 8004df8:	20003dd8 	.word	0x20003dd8
 8004dfc:	080060bc 	.word	0x080060bc
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	20003ddc 	.word	0x20003ddc
 8004e08:	080060c4 	.word	0x080060c4
 8004e0c:	08004e51 	.word	0x08004e51

08004e10 <vTask1_handler>:
}

// TaskFunction_t
void vTask1_handler(void *params){		// thread 1
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	while(1){
			LD1_GPIO_Port -> ODR ^= LD1_Pin;		// toogle LED1
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <vTask1_handler+0x34>)
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <vTask1_handler+0x34>)
 8004e1e:	f083 0301 	eor.w	r3, r3, #1
 8004e22:	6153      	str	r3, [r2, #20]
			rtos_delay(100);
 8004e24:	2064      	movs	r0, #100	; 0x64
 8004e26:	f000 f833 	bl	8004e90 <rtos_delay>
			sprintf(usr_msg, "Task 1: %ld \r\n", xTaskGetTickCount());
 8004e2a:	f7ff fa13 	bl	8004254 <xTaskGetTickCount>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	4905      	ldr	r1, [pc, #20]	; (8004e48 <vTask1_handler+0x38>)
 8004e34:	4805      	ldr	r0, [pc, #20]	; (8004e4c <vTask1_handler+0x3c>)
 8004e36:	f000 fd35 	bl	80058a4 <siprintf>
			printmsg(usr_msg);
 8004e3a:	4804      	ldr	r0, [pc, #16]	; (8004e4c <vTask1_handler+0x3c>)
 8004e3c:	f000 f848 	bl	8004ed0 <printmsg>
	while(1){
 8004e40:	e7ea      	b.n	8004e18 <vTask1_handler+0x8>
 8004e42:	bf00      	nop
 8004e44:	40020400 	.word	0x40020400
 8004e48:	080060cc 	.word	0x080060cc
 8004e4c:	20003df4 	.word	0x20003df4

08004e50 <vTask2_handler>:
	}
}

void vTask2_handler(void *params){		// thread 2
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	while(1){
		LD2_GPIO_Port -> ODR ^= LD2_Pin;		// toogle LED2
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <vTask2_handler+0x34>)
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <vTask2_handler+0x34>)
 8004e5e:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8004e62:	6153      	str	r3, [r2, #20]
		rtos_delay(500);
 8004e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e68:	f000 f812 	bl	8004e90 <rtos_delay>
		sprintf(usr_msg, "Task 2: %ld \r\n", xTaskGetTickCount());
 8004e6c:	f7ff f9f2 	bl	8004254 <xTaskGetTickCount>
 8004e70:	4603      	mov	r3, r0
 8004e72:	461a      	mov	r2, r3
 8004e74:	4904      	ldr	r1, [pc, #16]	; (8004e88 <vTask2_handler+0x38>)
 8004e76:	4805      	ldr	r0, [pc, #20]	; (8004e8c <vTask2_handler+0x3c>)
 8004e78:	f000 fd14 	bl	80058a4 <siprintf>
		printmsg(usr_msg);
 8004e7c:	4803      	ldr	r0, [pc, #12]	; (8004e8c <vTask2_handler+0x3c>)
 8004e7e:	f000 f827 	bl	8004ed0 <printmsg>
	while(1){
 8004e82:	e7e9      	b.n	8004e58 <vTask2_handler+0x8>
 8004e84:	40020400 	.word	0x40020400
 8004e88:	080060dc 	.word	0x080060dc
 8004e8c:	20003df4 	.word	0x20003df4

08004e90 <rtos_delay>:
	}
}

void rtos_delay(uint32_t delay_in_ms){	// travar a thread por um tempo (ms) de execucao
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	uint32_t current_tick_count = xTaskGetTickCount();
 8004e98:	f7ff f9dc 	bl	8004254 <xTaskGetTickCount>
 8004e9c:	60f8      	str	r0, [r7, #12]
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) /1000;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ea4:	fb02 f303 	mul.w	r3, r2, r3
 8004ea8:	4a08      	ldr	r2, [pc, #32]	; (8004ecc <rtos_delay+0x3c>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	099b      	lsrs	r3, r3, #6
 8004eb0:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount() < current_tick_count + delay_in_ticks);
 8004eb2:	bf00      	nop
 8004eb4:	f7ff f9ce 	bl	8004254 <xTaskGetTickCount>
 8004eb8:	4601      	mov	r1, r0
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	4299      	cmp	r1, r3
 8004ec2:	d3f7      	bcc.n	8004eb4 <rtos_delay+0x24>
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	10624dd3 	.word	0x10624dd3

08004ed0 <printmsg>:

void printmsg(char *msg){	// mandar mensagem pelo serial (UART)
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, msg, strlen(msg), HAL_MAX_DELAY);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fb f9b1 	bl	8000240 <strlen>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4803      	ldr	r0, [pc, #12]	; (8004ef8 <printmsg+0x28>)
 8004eea:	f7fe f809 	bl	8002f00 <HAL_UART_Transmit>
	// HAL_UART_Receive(&huart3, &var, 1, HAL_MAX_DELAY);
	// HAL_UART_GetState();
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20003e58 	.word	0x20003e58

08004efc <SystemClock_Config>:
  }
  /* USER CODE END 5 */
}

void SystemClock_Config(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b0b8      	sub	sp, #224	; 0xe0
 8004f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004f06:	2234      	movs	r2, #52	; 0x34
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fcc1 	bl	8005892 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f20:	f107 0308 	add.w	r3, r7, #8
 8004f24:	2290      	movs	r2, #144	; 0x90
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fcb2 	bl	8005892 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8004f2e:	f7fc fc15 	bl	800175c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f32:	4b3a      	ldr	r3, [pc, #232]	; (800501c <SystemClock_Config+0x120>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	4a39      	ldr	r2, [pc, #228]	; (800501c <SystemClock_Config+0x120>)
 8004f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <SystemClock_Config+0x120>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f46:	607b      	str	r3, [r7, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f4a:	4b35      	ldr	r3, [pc, #212]	; (8005020 <SystemClock_Config+0x124>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a34      	ldr	r2, [pc, #208]	; (8005020 <SystemClock_Config+0x124>)
 8004f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	4b32      	ldr	r3, [pc, #200]	; (8005020 <SystemClock_Config+0x124>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004f68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f70:	2302      	movs	r3, #2
 8004f72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004f7e:	2304      	movs	r3, #4
 8004f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004f84:	23d8      	movs	r3, #216	; 0xd8
 8004f86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004f90:	2309      	movs	r3, #9
 8004f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f96:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fc fc3e 	bl	800181c <HAL_RCC_OscConfig>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004fa6:	f000 f9a7 	bl	80052f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004faa:	f7fc fbe7 	bl	800177c <HAL_PWREx_EnableOverDrive>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004fb4:	f000 f9a0 	bl	80052f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fb8:	230f      	movs	r3, #15
 8004fba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004fca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004fda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004fde:	2107      	movs	r1, #7
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fc fe8d 	bl	8001d00 <HAL_RCC_ClockConfig>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004fec:	f000 f984 	bl	80052f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <SystemClock_Config+0x128>)
 8004ff2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	4618      	mov	r0, r3
 8005004:	f7fd f8a2 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800500e:	f000 f973 	bl	80052f8 <Error_Handler>
  }
}
 8005012:	bf00      	nop
 8005014:	37e0      	adds	r7, #224	; 0xe0
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
 8005020:	40007000 	.word	0x40007000
 8005024:	00200100 	.word	0x00200100

08005028 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800502e:	4b17      	ldr	r3, [pc, #92]	; (800508c <MX_ETH_Init+0x64>)
 8005030:	4a17      	ldr	r2, [pc, #92]	; (8005090 <MX_ETH_Init+0x68>)
 8005032:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <MX_ETH_Init+0x64>)
 8005036:	2201      	movs	r2, #1
 8005038:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800503a:	4b14      	ldr	r3, [pc, #80]	; (800508c <MX_ETH_Init+0x64>)
 800503c:	2200      	movs	r2, #0
 800503e:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005040:	2300      	movs	r3, #0
 8005042:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8005048:	23e1      	movs	r3, #225	; 0xe1
 800504a:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 800504c:	2300      	movs	r3, #0
 800504e:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8005050:	2300      	movs	r3, #0
 8005052:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8005054:	2300      	movs	r3, #0
 8005056:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8005058:	4a0c      	ldr	r2, [pc, #48]	; (800508c <MX_ETH_Init+0x64>)
 800505a:	463b      	mov	r3, r7
 800505c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800505e:	4b0b      	ldr	r3, [pc, #44]	; (800508c <MX_ETH_Init+0x64>)
 8005060:	2200      	movs	r2, #0
 8005062:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005064:	4b09      	ldr	r3, [pc, #36]	; (800508c <MX_ETH_Init+0x64>)
 8005066:	2200      	movs	r2, #0
 8005068:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800506a:	4b08      	ldr	r3, [pc, #32]	; (800508c <MX_ETH_Init+0x64>)
 800506c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005070:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8005072:	4806      	ldr	r0, [pc, #24]	; (800508c <MX_ETH_Init+0x64>)
 8005074:	f7fb fbee 	bl	8000854 <HAL_ETH_Init>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 800507e:	f000 f93b 	bl	80052f8 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	200042dc 	.word	0x200042dc
 8005090:	40028000 	.word	0x40028000

08005094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005098:	4b14      	ldr	r3, [pc, #80]	; (80050ec <MX_USART3_UART_Init+0x58>)
 800509a:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <MX_USART3_UART_Init+0x5c>)
 800509c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800509e:	4b13      	ldr	r3, [pc, #76]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80050a6:	4b11      	ldr	r3, [pc, #68]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80050ac:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80050b2:	4b0e      	ldr	r3, [pc, #56]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050ba:	220c      	movs	r2, #12
 80050bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050be:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80050d6:	4805      	ldr	r0, [pc, #20]	; (80050ec <MX_USART3_UART_Init+0x58>)
 80050d8:	f7fd fec4 	bl	8002e64 <HAL_UART_Init>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80050e2:	f000 f909 	bl	80052f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80050e6:	bf00      	nop
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20003e58 	.word	0x20003e58
 80050f0:	40004800 	.word	0x40004800

080050f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80050f8:	4b14      	ldr	r3, [pc, #80]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80050fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80050fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005102:	2206      	movs	r2, #6
 8005104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005108:	2202      	movs	r2, #2
 800510a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800510e:	2200      	movs	r2, #0
 8005110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005112:	4b0e      	ldr	r3, [pc, #56]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005114:	2202      	movs	r2, #2
 8005116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800511a:	2200      	movs	r2, #0
 800511c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005120:	2200      	movs	r2, #0
 8005122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005124:	4b09      	ldr	r3, [pc, #36]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005126:	2200      	movs	r2, #0
 8005128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800512c:	2200      	movs	r2, #0
 800512e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005136:	4805      	ldr	r0, [pc, #20]	; (800514c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005138:	f7fc f9d4 	bl	80014e4 <HAL_PCD_Init>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005142:	f000 f8d9 	bl	80052f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005146:	bf00      	nop
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20003ed8 	.word	0x20003ed8

08005150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08c      	sub	sp, #48	; 0x30
 8005154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005156:	f107 031c 	add.w	r3, r7, #28
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	609a      	str	r2, [r3, #8]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005166:	4b4a      	ldr	r3, [pc, #296]	; (8005290 <MX_GPIO_Init+0x140>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	4a49      	ldr	r2, [pc, #292]	; (8005290 <MX_GPIO_Init+0x140>)
 800516c:	f043 0304 	orr.w	r3, r3, #4
 8005170:	6313      	str	r3, [r2, #48]	; 0x30
 8005172:	4b47      	ldr	r3, [pc, #284]	; (8005290 <MX_GPIO_Init+0x140>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800517e:	4b44      	ldr	r3, [pc, #272]	; (8005290 <MX_GPIO_Init+0x140>)
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	4a43      	ldr	r2, [pc, #268]	; (8005290 <MX_GPIO_Init+0x140>)
 8005184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005188:	6313      	str	r3, [r2, #48]	; 0x30
 800518a:	4b41      	ldr	r3, [pc, #260]	; (8005290 <MX_GPIO_Init+0x140>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005196:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <MX_GPIO_Init+0x140>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	4a3d      	ldr	r2, [pc, #244]	; (8005290 <MX_GPIO_Init+0x140>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	6313      	str	r3, [r2, #48]	; 0x30
 80051a2:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <MX_GPIO_Init+0x140>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ae:	4b38      	ldr	r3, [pc, #224]	; (8005290 <MX_GPIO_Init+0x140>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	4a37      	ldr	r2, [pc, #220]	; (8005290 <MX_GPIO_Init+0x140>)
 80051b4:	f043 0302 	orr.w	r3, r3, #2
 80051b8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ba:	4b35      	ldr	r3, [pc, #212]	; (8005290 <MX_GPIO_Init+0x140>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80051c6:	4b32      	ldr	r3, [pc, #200]	; (8005290 <MX_GPIO_Init+0x140>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	4a31      	ldr	r2, [pc, #196]	; (8005290 <MX_GPIO_Init+0x140>)
 80051cc:	f043 0308 	orr.w	r3, r3, #8
 80051d0:	6313      	str	r3, [r2, #48]	; 0x30
 80051d2:	4b2f      	ldr	r3, [pc, #188]	; (8005290 <MX_GPIO_Init+0x140>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80051de:	4b2c      	ldr	r3, [pc, #176]	; (8005290 <MX_GPIO_Init+0x140>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <MX_GPIO_Init+0x140>)
 80051e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ea:	4b29      	ldr	r3, [pc, #164]	; (8005290 <MX_GPIO_Init+0x140>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80051f6:	2200      	movs	r2, #0
 80051f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80051fc:	4825      	ldr	r0, [pc, #148]	; (8005294 <MX_GPIO_Init+0x144>)
 80051fe:	f7fc f93f 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005202:	2200      	movs	r2, #0
 8005204:	2140      	movs	r1, #64	; 0x40
 8005206:	4824      	ldr	r0, [pc, #144]	; (8005298 <MX_GPIO_Init+0x148>)
 8005208:	f7fc f93a 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800520c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005212:	4b22      	ldr	r3, [pc, #136]	; (800529c <MX_GPIO_Init+0x14c>)
 8005214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800521a:	f107 031c 	add.w	r3, r7, #28
 800521e:	4619      	mov	r1, r3
 8005220:	481f      	ldr	r0, [pc, #124]	; (80052a0 <MX_GPIO_Init+0x150>)
 8005222:	f7fb ff83 	bl	800112c <HAL_GPIO_Init>

  /* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	2102      	movs	r1, #2
 800522a:	2028      	movs	r0, #40	; 0x28
 800522c:	f7fb fae8 	bl	8000800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005230:	2028      	movs	r0, #40	; 0x28
 8005232:	f7fb fb01 	bl	8000838 <HAL_NVIC_EnableIRQ>


  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD1_Pin;
 8005236:	f244 0381 	movw	r3, #16513	; 0x4081
 800523a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800523c:	2301      	movs	r3, #1
 800523e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005240:	2300      	movs	r3, #0
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005244:	2300      	movs	r3, #0
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005248:	f107 031c 	add.w	r3, r7, #28
 800524c:	4619      	mov	r1, r3
 800524e:	4811      	ldr	r0, [pc, #68]	; (8005294 <MX_GPIO_Init+0x144>)
 8005250:	f7fb ff6c 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005254:	2340      	movs	r3, #64	; 0x40
 8005256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005258:	2301      	movs	r3, #1
 800525a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525c:	2300      	movs	r3, #0
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005260:	2300      	movs	r3, #0
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005264:	f107 031c 	add.w	r3, r7, #28
 8005268:	4619      	mov	r1, r3
 800526a:	480b      	ldr	r0, [pc, #44]	; (8005298 <MX_GPIO_Init+0x148>)
 800526c:	f7fb ff5e 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005274:	2300      	movs	r3, #0
 8005276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800527c:	f107 031c 	add.w	r3, r7, #28
 8005280:	4619      	mov	r1, r3
 8005282:	4805      	ldr	r0, [pc, #20]	; (8005298 <MX_GPIO_Init+0x148>)
 8005284:	f7fb ff52 	bl	800112c <HAL_GPIO_Init>
}
 8005288:	bf00      	nop
 800528a:	3730      	adds	r7, #48	; 0x30
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	40020400 	.word	0x40020400
 8005298:	40021800 	.word	0x40021800
 800529c:	10110000 	.word	0x10110000
 80052a0:	40020800 	.word	0x40020800

080052a4 <HAL_GPIO_EXTI_Callback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13){
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b4:	d108      	bne.n	80052c8 <HAL_GPIO_EXTI_Callback+0x24>
    /* Toggle LED3 */

	  //xTaskNotifyFromISR();
	  LD3_GPIO_Port -> ODR ^= LD3_Pin;		// toogle LED3
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	4a05      	ldr	r2, [pc, #20]	; (80052d0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80052bc:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80052c0:	6153      	str	r3, [r2, #20]
	  HAL_Delay(100);
 80052c2:	2064      	movs	r0, #100	; 0x64
 80052c4:	f7fb f9c2 	bl	800064c <HAL_Delay>
  }
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40020400 	.word	0x40020400

080052d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80052e6:	f7fb f991 	bl	800060c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000

080052f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80052fc:	bf00      	nop
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_MspInit+0x4c>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	4a10      	ldr	r2, [pc, #64]	; (8005354 <HAL_MspInit+0x4c>)
 8005314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005318:	6413      	str	r3, [r2, #64]	; 0x40
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_MspInit+0x4c>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_MspInit+0x4c>)
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <HAL_MspInit+0x4c>)
 800532c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005330:	6453      	str	r3, [r2, #68]	; 0x44
 8005332:	4b08      	ldr	r3, [pc, #32]	; (8005354 <HAL_MspInit+0x4c>)
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800533e:	2200      	movs	r2, #0
 8005340:	210f      	movs	r1, #15
 8005342:	f06f 0001 	mvn.w	r0, #1
 8005346:	f7fb fa5b 	bl	8000800 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800

08005358 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08e      	sub	sp, #56	; 0x38
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a4e      	ldr	r2, [pc, #312]	; (80054b0 <HAL_ETH_MspInit+0x158>)
 8005376:	4293      	cmp	r3, r2
 8005378:	f040 8096 	bne.w	80054a8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800537c:	4b4d      	ldr	r3, [pc, #308]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	4a4c      	ldr	r2, [pc, #304]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 8005382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005386:	6313      	str	r3, [r2, #48]	; 0x30
 8005388:	4b4a      	ldr	r3, [pc, #296]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	4b47      	ldr	r3, [pc, #284]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 800539a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800539e:	6313      	str	r3, [r2, #48]	; 0x30
 80053a0:	4b44      	ldr	r3, [pc, #272]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	4a40      	ldr	r2, [pc, #256]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053b6:	6313      	str	r3, [r2, #48]	; 0x30
 80053b8:	4b3e      	ldr	r3, [pc, #248]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053c4:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	4a3a      	ldr	r2, [pc, #232]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053ca:	f043 0304 	orr.w	r3, r3, #4
 80053ce:	6313      	str	r3, [r2, #48]	; 0x30
 80053d0:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053dc:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	4a34      	ldr	r2, [pc, #208]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	6313      	str	r3, [r2, #48]	; 0x30
 80053e8:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053f4:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	4a2e      	ldr	r2, [pc, #184]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 80053fa:	f043 0302 	orr.w	r3, r3, #2
 80053fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005400:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800540c:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 8005412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005416:	6313      	str	r3, [r2, #48]	; 0x30
 8005418:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <HAL_ETH_MspInit+0x15c>)
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005424:	2332      	movs	r3, #50	; 0x32
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005428:	2302      	movs	r3, #2
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542c:	2300      	movs	r3, #0
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005430:	2303      	movs	r3, #3
 8005432:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005434:	230b      	movs	r3, #11
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800543c:	4619      	mov	r1, r3
 800543e:	481e      	ldr	r0, [pc, #120]	; (80054b8 <HAL_ETH_MspInit+0x160>)
 8005440:	f7fb fe74 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005444:	2386      	movs	r3, #134	; 0x86
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005448:	2302      	movs	r3, #2
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544c:	2300      	movs	r3, #0
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005450:	2303      	movs	r3, #3
 8005452:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005454:	230b      	movs	r3, #11
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800545c:	4619      	mov	r1, r3
 800545e:	4817      	ldr	r0, [pc, #92]	; (80054bc <HAL_ETH_MspInit+0x164>)
 8005460:	f7fb fe64 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546a:	2302      	movs	r3, #2
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546e:	2300      	movs	r3, #0
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005472:	2303      	movs	r3, #3
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005476:	230b      	movs	r3, #11
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800547a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800547e:	4619      	mov	r1, r3
 8005480:	480f      	ldr	r0, [pc, #60]	; (80054c0 <HAL_ETH_MspInit+0x168>)
 8005482:	f7fb fe53 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005486:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548c:	2302      	movs	r3, #2
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005494:	2303      	movs	r3, #3
 8005496:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005498:	230b      	movs	r3, #11
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800549c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a0:	4619      	mov	r1, r3
 80054a2:	4808      	ldr	r0, [pc, #32]	; (80054c4 <HAL_ETH_MspInit+0x16c>)
 80054a4:	f7fb fe42 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80054a8:	bf00      	nop
 80054aa:	3738      	adds	r7, #56	; 0x38
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40028000 	.word	0x40028000
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40020800 	.word	0x40020800
 80054bc:	40020000 	.word	0x40020000
 80054c0:	40020400 	.word	0x40020400
 80054c4:	40021800 	.word	0x40021800

080054c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d0:	f107 0314 	add.w	r3, r7, #20
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a17      	ldr	r2, [pc, #92]	; (8005544 <HAL_UART_MspInit+0x7c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d128      	bne.n	800553c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80054ea:	4b17      	ldr	r3, [pc, #92]	; (8005548 <HAL_UART_MspInit+0x80>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	4a16      	ldr	r2, [pc, #88]	; (8005548 <HAL_UART_MspInit+0x80>)
 80054f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f4:	6413      	str	r3, [r2, #64]	; 0x40
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <HAL_UART_MspInit+0x80>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <HAL_UART_MspInit+0x80>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	4a10      	ldr	r2, [pc, #64]	; (8005548 <HAL_UART_MspInit+0x80>)
 8005508:	f043 0308 	orr.w	r3, r3, #8
 800550c:	6313      	str	r3, [r2, #48]	; 0x30
 800550e:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <HAL_UART_MspInit+0x80>)
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800551a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800551e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005520:	2302      	movs	r3, #2
 8005522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005528:	2303      	movs	r3, #3
 800552a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800552c:	2307      	movs	r3, #7
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	4619      	mov	r1, r3
 8005536:	4805      	ldr	r0, [pc, #20]	; (800554c <HAL_UART_MspInit+0x84>)
 8005538:	f7fb fdf8 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800553c:	bf00      	nop
 800553e:	3728      	adds	r7, #40	; 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40004800 	.word	0x40004800
 8005548:	40023800 	.word	0x40023800
 800554c:	40020c00 	.word	0x40020c00

08005550 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005558:	f107 0314 	add.w	r3, r7, #20
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	60da      	str	r2, [r3, #12]
 8005566:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005570:	d141      	bne.n	80055f6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005572:	4b23      	ldr	r3, [pc, #140]	; (8005600 <HAL_PCD_MspInit+0xb0>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	4a22      	ldr	r2, [pc, #136]	; (8005600 <HAL_PCD_MspInit+0xb0>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6313      	str	r3, [r2, #48]	; 0x30
 800557e:	4b20      	ldr	r3, [pc, #128]	; (8005600 <HAL_PCD_MspInit+0xb0>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800558a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800558e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005590:	2302      	movs	r3, #2
 8005592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005594:	2300      	movs	r3, #0
 8005596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005598:	2303      	movs	r3, #3
 800559a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800559c:	230a      	movs	r3, #10
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055a0:	f107 0314 	add.w	r3, r7, #20
 80055a4:	4619      	mov	r1, r3
 80055a6:	4817      	ldr	r0, [pc, #92]	; (8005604 <HAL_PCD_MspInit+0xb4>)
 80055a8:	f7fb fdc0 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80055ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80055ba:	f107 0314 	add.w	r3, r7, #20
 80055be:	4619      	mov	r1, r3
 80055c0:	4810      	ldr	r0, [pc, #64]	; (8005604 <HAL_PCD_MspInit+0xb4>)
 80055c2:	f7fb fdb3 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80055c6:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <HAL_PCD_MspInit+0xb0>)
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	4a0d      	ldr	r2, [pc, #52]	; (8005600 <HAL_PCD_MspInit+0xb0>)
 80055cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d0:	6353      	str	r3, [r2, #52]	; 0x34
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <HAL_PCD_MspInit+0xb0>)
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4b08      	ldr	r3, [pc, #32]	; (8005600 <HAL_PCD_MspInit+0xb0>)
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	4a07      	ldr	r2, [pc, #28]	; (8005600 <HAL_PCD_MspInit+0xb0>)
 80055e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e8:	6453      	str	r3, [r2, #68]	; 0x44
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_PCD_MspInit+0xb0>)
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80055f6:	bf00      	nop
 80055f8:	3728      	adds	r7, #40	; 0x28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40023800 	.word	0x40023800
 8005604:	40020000 	.word	0x40020000

08005608 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005618:	2200      	movs	r2, #0
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	2019      	movs	r0, #25
 800561e:	f7fb f8ef 	bl	8000800 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005622:	2019      	movs	r0, #25
 8005624:	f7fb f908 	bl	8000838 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005628:	4b1f      	ldr	r3, [pc, #124]	; (80056a8 <HAL_InitTick+0xa0>)
 800562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562c:	4a1e      	ldr	r2, [pc, #120]	; (80056a8 <HAL_InitTick+0xa0>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6453      	str	r3, [r2, #68]	; 0x44
 8005634:	4b1c      	ldr	r3, [pc, #112]	; (80056a8 <HAL_InitTick+0xa0>)
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005640:	f107 0210 	add.w	r2, r7, #16
 8005644:	f107 0314 	add.w	r3, r7, #20
 8005648:	4611      	mov	r1, r2
 800564a:	4618      	mov	r0, r3
 800564c:	f7fc fd4c 	bl	80020e8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005650:	f7fc fd36 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8005654:	4603      	mov	r3, r0
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	4a13      	ldr	r2, [pc, #76]	; (80056ac <HAL_InitTick+0xa4>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	0c9b      	lsrs	r3, r3, #18
 8005664:	3b01      	subs	r3, #1
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005668:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_InitTick+0xa8>)
 800566a:	4a12      	ldr	r2, [pc, #72]	; (80056b4 <HAL_InitTick+0xac>)
 800566c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800566e:	4b10      	ldr	r3, [pc, #64]	; (80056b0 <HAL_InitTick+0xa8>)
 8005670:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005674:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005676:	4a0e      	ldr	r2, [pc, #56]	; (80056b0 <HAL_InitTick+0xa8>)
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <HAL_InitTick+0xa8>)
 800567e:	2200      	movs	r2, #0
 8005680:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_InitTick+0xa8>)
 8005684:	2200      	movs	r2, #0
 8005686:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005688:	4809      	ldr	r0, [pc, #36]	; (80056b0 <HAL_InitTick+0xa8>)
 800568a:	f7fd f985 	bl	8002998 <HAL_TIM_Base_Init>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005694:	4806      	ldr	r0, [pc, #24]	; (80056b0 <HAL_InitTick+0xa8>)
 8005696:	f7fd f9b5 	bl	8002a04 <HAL_TIM_Base_Start_IT>
 800569a:	4603      	mov	r3, r0
 800569c:	e000      	b.n	80056a0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3730      	adds	r7, #48	; 0x30
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40023800 	.word	0x40023800
 80056ac:	431bde83 	.word	0x431bde83
 80056b0:	20004324 	.word	0x20004324
 80056b4:	40010000 	.word	0x40010000

080056b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056bc:	bf00      	nop
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056c6:	b480      	push	{r7}
 80056c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056ca:	e7fe      	b.n	80056ca <HardFault_Handler+0x4>

080056cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056d0:	e7fe      	b.n	80056d0 <MemManage_Handler+0x4>

080056d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056d6:	e7fe      	b.n	80056d6 <BusFault_Handler+0x4>

080056d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056dc:	e7fe      	b.n	80056dc <UsageFault_Handler+0x4>

080056de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056de:	b480      	push	{r7}
 80056e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056e2:	bf00      	nop
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056f0:	4802      	ldr	r0, [pc, #8]	; (80056fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80056f2:	f7fd f9b1 	bl	8002a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20004324 	.word	0x20004324

08005700 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles PC13 update interrupt.
  */
void EXTI15_10_IRQHandler(void){
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8005704:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005708:	f7fb fed4 	bl	80014b4 <HAL_GPIO_EXTI_IRQHandler>
}
 800570c:	bf00      	nop
 800570e:	bd80      	pop	{r7, pc}

08005710 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005718:	4b11      	ldr	r3, [pc, #68]	; (8005760 <_sbrk+0x50>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <_sbrk+0x16>
		heap_end = &end;
 8005720:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <_sbrk+0x50>)
 8005722:	4a10      	ldr	r2, [pc, #64]	; (8005764 <_sbrk+0x54>)
 8005724:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005726:	4b0e      	ldr	r3, [pc, #56]	; (8005760 <_sbrk+0x50>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800572c:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <_sbrk+0x50>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4413      	add	r3, r2
 8005734:	466a      	mov	r2, sp
 8005736:	4293      	cmp	r3, r2
 8005738:	d907      	bls.n	800574a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800573a:	f000 f875 	bl	8005828 <__errno>
 800573e:	4602      	mov	r2, r0
 8005740:	230c      	movs	r3, #12
 8005742:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005748:	e006      	b.n	8005758 <_sbrk+0x48>
	}

	heap_end += incr;
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <_sbrk+0x50>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4413      	add	r3, r2
 8005752:	4a03      	ldr	r2, [pc, #12]	; (8005760 <_sbrk+0x50>)
 8005754:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005756:	68fb      	ldr	r3, [r7, #12]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20003de0 	.word	0x20003de0
 8005764:	20004368 	.word	0x20004368

08005768 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800576c:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <SystemInit+0x5c>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <SystemInit+0x5c>)
 8005774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800577c:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <SystemInit+0x60>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <SystemInit+0x60>)
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005788:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <SystemInit+0x60>)
 800578a:	2200      	movs	r2, #0
 800578c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800578e:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <SystemInit+0x60>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	490d      	ldr	r1, [pc, #52]	; (80057c8 <SystemInit+0x60>)
 8005794:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <SystemInit+0x64>)
 8005796:	4013      	ands	r3, r2
 8005798:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800579a:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <SystemInit+0x60>)
 800579c:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <SystemInit+0x68>)
 800579e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80057a0:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <SystemInit+0x60>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <SystemInit+0x60>)
 80057a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <SystemInit+0x60>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057b2:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <SystemInit+0x5c>)
 80057b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057b8:	609a      	str	r2, [r3, #8]
#endif
}
 80057ba:	bf00      	nop
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	e000ed00 	.word	0xe000ed00
 80057c8:	40023800 	.word	0x40023800
 80057cc:	fef6ffff 	.word	0xfef6ffff
 80057d0:	24003010 	.word	0x24003010

080057d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80057d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800580c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80057d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80057da:	e003      	b.n	80057e4 <LoopCopyDataInit>

080057dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80057de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057e2:	3104      	adds	r1, #4

080057e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057e4:	480b      	ldr	r0, [pc, #44]	; (8005814 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80057e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057ec:	d3f6      	bcc.n	80057dc <CopyDataInit>
  ldr  r2, =_sbss
 80057ee:	4a0b      	ldr	r2, [pc, #44]	; (800581c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80057f0:	e002      	b.n	80057f8 <LoopFillZerobss>

080057f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057f4:	f842 3b04 	str.w	r3, [r2], #4

080057f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057f8:	4b09      	ldr	r3, [pc, #36]	; (8005820 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80057fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80057fc:	d3f9      	bcc.n	80057f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80057fe:	f7ff ffb3 	bl	8005768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005802:	f000 f817 	bl	8005834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005806:	f7ff facf 	bl	8004da8 <main>
  bx  lr    
 800580a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800580c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005810:	08006148 	.word	0x08006148
  ldr  r0, =_sdata
 8005814:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005818:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800581c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8005820:	20004368 	.word	0x20004368

08005824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005824:	e7fe      	b.n	8005824 <ADC_IRQHandler>
	...

08005828 <__errno>:
 8005828:	4b01      	ldr	r3, [pc, #4]	; (8005830 <__errno+0x8>)
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	2000000c 	.word	0x2000000c

08005834 <__libc_init_array>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4e0d      	ldr	r6, [pc, #52]	; (800586c <__libc_init_array+0x38>)
 8005838:	4c0d      	ldr	r4, [pc, #52]	; (8005870 <__libc_init_array+0x3c>)
 800583a:	1ba4      	subs	r4, r4, r6
 800583c:	10a4      	asrs	r4, r4, #2
 800583e:	2500      	movs	r5, #0
 8005840:	42a5      	cmp	r5, r4
 8005842:	d109      	bne.n	8005858 <__libc_init_array+0x24>
 8005844:	4e0b      	ldr	r6, [pc, #44]	; (8005874 <__libc_init_array+0x40>)
 8005846:	4c0c      	ldr	r4, [pc, #48]	; (8005878 <__libc_init_array+0x44>)
 8005848:	f000 fc28 	bl	800609c <_init>
 800584c:	1ba4      	subs	r4, r4, r6
 800584e:	10a4      	asrs	r4, r4, #2
 8005850:	2500      	movs	r5, #0
 8005852:	42a5      	cmp	r5, r4
 8005854:	d105      	bne.n	8005862 <__libc_init_array+0x2e>
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800585c:	4798      	blx	r3
 800585e:	3501      	adds	r5, #1
 8005860:	e7ee      	b.n	8005840 <__libc_init_array+0xc>
 8005862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005866:	4798      	blx	r3
 8005868:	3501      	adds	r5, #1
 800586a:	e7f2      	b.n	8005852 <__libc_init_array+0x1e>
 800586c:	08006140 	.word	0x08006140
 8005870:	08006140 	.word	0x08006140
 8005874:	08006140 	.word	0x08006140
 8005878:	08006144 	.word	0x08006144

0800587c <memcpy>:
 800587c:	b510      	push	{r4, lr}
 800587e:	1e43      	subs	r3, r0, #1
 8005880:	440a      	add	r2, r1
 8005882:	4291      	cmp	r1, r2
 8005884:	d100      	bne.n	8005888 <memcpy+0xc>
 8005886:	bd10      	pop	{r4, pc}
 8005888:	f811 4b01 	ldrb.w	r4, [r1], #1
 800588c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005890:	e7f7      	b.n	8005882 <memcpy+0x6>

08005892 <memset>:
 8005892:	4402      	add	r2, r0
 8005894:	4603      	mov	r3, r0
 8005896:	4293      	cmp	r3, r2
 8005898:	d100      	bne.n	800589c <memset+0xa>
 800589a:	4770      	bx	lr
 800589c:	f803 1b01 	strb.w	r1, [r3], #1
 80058a0:	e7f9      	b.n	8005896 <memset+0x4>
	...

080058a4 <siprintf>:
 80058a4:	b40e      	push	{r1, r2, r3}
 80058a6:	b500      	push	{lr}
 80058a8:	b09c      	sub	sp, #112	; 0x70
 80058aa:	ab1d      	add	r3, sp, #116	; 0x74
 80058ac:	9002      	str	r0, [sp, #8]
 80058ae:	9006      	str	r0, [sp, #24]
 80058b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058b4:	4809      	ldr	r0, [pc, #36]	; (80058dc <siprintf+0x38>)
 80058b6:	9107      	str	r1, [sp, #28]
 80058b8:	9104      	str	r1, [sp, #16]
 80058ba:	4909      	ldr	r1, [pc, #36]	; (80058e0 <siprintf+0x3c>)
 80058bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c0:	9105      	str	r1, [sp, #20]
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	a902      	add	r1, sp, #8
 80058c8:	f000 f866 	bl	8005998 <_svfiprintf_r>
 80058cc:	9b02      	ldr	r3, [sp, #8]
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	b01c      	add	sp, #112	; 0x70
 80058d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d8:	b003      	add	sp, #12
 80058da:	4770      	bx	lr
 80058dc:	2000000c 	.word	0x2000000c
 80058e0:	ffff0208 	.word	0xffff0208

080058e4 <__ssputs_r>:
 80058e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	688e      	ldr	r6, [r1, #8]
 80058ea:	429e      	cmp	r6, r3
 80058ec:	4682      	mov	sl, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	4690      	mov	r8, r2
 80058f2:	4699      	mov	r9, r3
 80058f4:	d837      	bhi.n	8005966 <__ssputs_r+0x82>
 80058f6:	898a      	ldrh	r2, [r1, #12]
 80058f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058fc:	d031      	beq.n	8005962 <__ssputs_r+0x7e>
 80058fe:	6825      	ldr	r5, [r4, #0]
 8005900:	6909      	ldr	r1, [r1, #16]
 8005902:	1a6f      	subs	r7, r5, r1
 8005904:	6965      	ldr	r5, [r4, #20]
 8005906:	2302      	movs	r3, #2
 8005908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800590c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005910:	f109 0301 	add.w	r3, r9, #1
 8005914:	443b      	add	r3, r7
 8005916:	429d      	cmp	r5, r3
 8005918:	bf38      	it	cc
 800591a:	461d      	movcc	r5, r3
 800591c:	0553      	lsls	r3, r2, #21
 800591e:	d530      	bpl.n	8005982 <__ssputs_r+0x9e>
 8005920:	4629      	mov	r1, r5
 8005922:	f000 fb21 	bl	8005f68 <_malloc_r>
 8005926:	4606      	mov	r6, r0
 8005928:	b950      	cbnz	r0, 8005940 <__ssputs_r+0x5c>
 800592a:	230c      	movs	r3, #12
 800592c:	f8ca 3000 	str.w	r3, [sl]
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005940:	463a      	mov	r2, r7
 8005942:	6921      	ldr	r1, [r4, #16]
 8005944:	f7ff ff9a 	bl	800587c <memcpy>
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005952:	81a3      	strh	r3, [r4, #12]
 8005954:	6126      	str	r6, [r4, #16]
 8005956:	6165      	str	r5, [r4, #20]
 8005958:	443e      	add	r6, r7
 800595a:	1bed      	subs	r5, r5, r7
 800595c:	6026      	str	r6, [r4, #0]
 800595e:	60a5      	str	r5, [r4, #8]
 8005960:	464e      	mov	r6, r9
 8005962:	454e      	cmp	r6, r9
 8005964:	d900      	bls.n	8005968 <__ssputs_r+0x84>
 8005966:	464e      	mov	r6, r9
 8005968:	4632      	mov	r2, r6
 800596a:	4641      	mov	r1, r8
 800596c:	6820      	ldr	r0, [r4, #0]
 800596e:	f000 fa93 	bl	8005e98 <memmove>
 8005972:	68a3      	ldr	r3, [r4, #8]
 8005974:	1b9b      	subs	r3, r3, r6
 8005976:	60a3      	str	r3, [r4, #8]
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	441e      	add	r6, r3
 800597c:	6026      	str	r6, [r4, #0]
 800597e:	2000      	movs	r0, #0
 8005980:	e7dc      	b.n	800593c <__ssputs_r+0x58>
 8005982:	462a      	mov	r2, r5
 8005984:	f000 fb4a 	bl	800601c <_realloc_r>
 8005988:	4606      	mov	r6, r0
 800598a:	2800      	cmp	r0, #0
 800598c:	d1e2      	bne.n	8005954 <__ssputs_r+0x70>
 800598e:	6921      	ldr	r1, [r4, #16]
 8005990:	4650      	mov	r0, sl
 8005992:	f000 fa9b 	bl	8005ecc <_free_r>
 8005996:	e7c8      	b.n	800592a <__ssputs_r+0x46>

08005998 <_svfiprintf_r>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	461d      	mov	r5, r3
 800599e:	898b      	ldrh	r3, [r1, #12]
 80059a0:	061f      	lsls	r7, r3, #24
 80059a2:	b09d      	sub	sp, #116	; 0x74
 80059a4:	4680      	mov	r8, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	4616      	mov	r6, r2
 80059aa:	d50f      	bpl.n	80059cc <_svfiprintf_r+0x34>
 80059ac:	690b      	ldr	r3, [r1, #16]
 80059ae:	b96b      	cbnz	r3, 80059cc <_svfiprintf_r+0x34>
 80059b0:	2140      	movs	r1, #64	; 0x40
 80059b2:	f000 fad9 	bl	8005f68 <_malloc_r>
 80059b6:	6020      	str	r0, [r4, #0]
 80059b8:	6120      	str	r0, [r4, #16]
 80059ba:	b928      	cbnz	r0, 80059c8 <_svfiprintf_r+0x30>
 80059bc:	230c      	movs	r3, #12
 80059be:	f8c8 3000 	str.w	r3, [r8]
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c6:	e0c8      	b.n	8005b5a <_svfiprintf_r+0x1c2>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	6163      	str	r3, [r4, #20]
 80059cc:	2300      	movs	r3, #0
 80059ce:	9309      	str	r3, [sp, #36]	; 0x24
 80059d0:	2320      	movs	r3, #32
 80059d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059d6:	2330      	movs	r3, #48	; 0x30
 80059d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059dc:	9503      	str	r5, [sp, #12]
 80059de:	f04f 0b01 	mov.w	fp, #1
 80059e2:	4637      	mov	r7, r6
 80059e4:	463d      	mov	r5, r7
 80059e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059ea:	b10b      	cbz	r3, 80059f0 <_svfiprintf_r+0x58>
 80059ec:	2b25      	cmp	r3, #37	; 0x25
 80059ee:	d13e      	bne.n	8005a6e <_svfiprintf_r+0xd6>
 80059f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80059f4:	d00b      	beq.n	8005a0e <_svfiprintf_r+0x76>
 80059f6:	4653      	mov	r3, sl
 80059f8:	4632      	mov	r2, r6
 80059fa:	4621      	mov	r1, r4
 80059fc:	4640      	mov	r0, r8
 80059fe:	f7ff ff71 	bl	80058e4 <__ssputs_r>
 8005a02:	3001      	adds	r0, #1
 8005a04:	f000 80a4 	beq.w	8005b50 <_svfiprintf_r+0x1b8>
 8005a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0a:	4453      	add	r3, sl
 8005a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0e:	783b      	ldrb	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 809d 	beq.w	8005b50 <_svfiprintf_r+0x1b8>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a28:	931a      	str	r3, [sp, #104]	; 0x68
 8005a2a:	462f      	mov	r7, r5
 8005a2c:	2205      	movs	r2, #5
 8005a2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a32:	4850      	ldr	r0, [pc, #320]	; (8005b74 <_svfiprintf_r+0x1dc>)
 8005a34:	f7fa fc0c 	bl	8000250 <memchr>
 8005a38:	9b04      	ldr	r3, [sp, #16]
 8005a3a:	b9d0      	cbnz	r0, 8005a72 <_svfiprintf_r+0xda>
 8005a3c:	06d9      	lsls	r1, r3, #27
 8005a3e:	bf44      	itt	mi
 8005a40:	2220      	movmi	r2, #32
 8005a42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a46:	071a      	lsls	r2, r3, #28
 8005a48:	bf44      	itt	mi
 8005a4a:	222b      	movmi	r2, #43	; 0x2b
 8005a4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a50:	782a      	ldrb	r2, [r5, #0]
 8005a52:	2a2a      	cmp	r2, #42	; 0x2a
 8005a54:	d015      	beq.n	8005a82 <_svfiprintf_r+0xea>
 8005a56:	9a07      	ldr	r2, [sp, #28]
 8005a58:	462f      	mov	r7, r5
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	250a      	movs	r5, #10
 8005a5e:	4639      	mov	r1, r7
 8005a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a64:	3b30      	subs	r3, #48	; 0x30
 8005a66:	2b09      	cmp	r3, #9
 8005a68:	d94d      	bls.n	8005b06 <_svfiprintf_r+0x16e>
 8005a6a:	b1b8      	cbz	r0, 8005a9c <_svfiprintf_r+0x104>
 8005a6c:	e00f      	b.n	8005a8e <_svfiprintf_r+0xf6>
 8005a6e:	462f      	mov	r7, r5
 8005a70:	e7b8      	b.n	80059e4 <_svfiprintf_r+0x4c>
 8005a72:	4a40      	ldr	r2, [pc, #256]	; (8005b74 <_svfiprintf_r+0x1dc>)
 8005a74:	1a80      	subs	r0, r0, r2
 8005a76:	fa0b f000 	lsl.w	r0, fp, r0
 8005a7a:	4318      	orrs	r0, r3
 8005a7c:	9004      	str	r0, [sp, #16]
 8005a7e:	463d      	mov	r5, r7
 8005a80:	e7d3      	b.n	8005a2a <_svfiprintf_r+0x92>
 8005a82:	9a03      	ldr	r2, [sp, #12]
 8005a84:	1d11      	adds	r1, r2, #4
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	9103      	str	r1, [sp, #12]
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	db01      	blt.n	8005a92 <_svfiprintf_r+0xfa>
 8005a8e:	9207      	str	r2, [sp, #28]
 8005a90:	e004      	b.n	8005a9c <_svfiprintf_r+0x104>
 8005a92:	4252      	negs	r2, r2
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	9207      	str	r2, [sp, #28]
 8005a9a:	9304      	str	r3, [sp, #16]
 8005a9c:	783b      	ldrb	r3, [r7, #0]
 8005a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa0:	d10c      	bne.n	8005abc <_svfiprintf_r+0x124>
 8005aa2:	787b      	ldrb	r3, [r7, #1]
 8005aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa6:	d133      	bne.n	8005b10 <_svfiprintf_r+0x178>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9203      	str	r2, [sp, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfb8      	it	lt
 8005ab4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ab8:	3702      	adds	r7, #2
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	4d2e      	ldr	r5, [pc, #184]	; (8005b78 <_svfiprintf_r+0x1e0>)
 8005abe:	7839      	ldrb	r1, [r7, #0]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f7fa fbc4 	bl	8000250 <memchr>
 8005ac8:	b138      	cbz	r0, 8005ada <_svfiprintf_r+0x142>
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	1b40      	subs	r0, r0, r5
 8005ace:	fa03 f000 	lsl.w	r0, r3, r0
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	4303      	orrs	r3, r0
 8005ad6:	3701      	adds	r7, #1
 8005ad8:	9304      	str	r3, [sp, #16]
 8005ada:	7839      	ldrb	r1, [r7, #0]
 8005adc:	4827      	ldr	r0, [pc, #156]	; (8005b7c <_svfiprintf_r+0x1e4>)
 8005ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ae2:	2206      	movs	r2, #6
 8005ae4:	1c7e      	adds	r6, r7, #1
 8005ae6:	f7fa fbb3 	bl	8000250 <memchr>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d038      	beq.n	8005b60 <_svfiprintf_r+0x1c8>
 8005aee:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <_svfiprintf_r+0x1e8>)
 8005af0:	bb13      	cbnz	r3, 8005b38 <_svfiprintf_r+0x1a0>
 8005af2:	9b03      	ldr	r3, [sp, #12]
 8005af4:	3307      	adds	r3, #7
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	3308      	adds	r3, #8
 8005afc:	9303      	str	r3, [sp, #12]
 8005afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b00:	444b      	add	r3, r9
 8005b02:	9309      	str	r3, [sp, #36]	; 0x24
 8005b04:	e76d      	b.n	80059e2 <_svfiprintf_r+0x4a>
 8005b06:	fb05 3202 	mla	r2, r5, r2, r3
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	460f      	mov	r7, r1
 8005b0e:	e7a6      	b.n	8005a5e <_svfiprintf_r+0xc6>
 8005b10:	2300      	movs	r3, #0
 8005b12:	3701      	adds	r7, #1
 8005b14:	9305      	str	r3, [sp, #20]
 8005b16:	4619      	mov	r1, r3
 8005b18:	250a      	movs	r5, #10
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b20:	3a30      	subs	r2, #48	; 0x30
 8005b22:	2a09      	cmp	r2, #9
 8005b24:	d903      	bls.n	8005b2e <_svfiprintf_r+0x196>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0c8      	beq.n	8005abc <_svfiprintf_r+0x124>
 8005b2a:	9105      	str	r1, [sp, #20]
 8005b2c:	e7c6      	b.n	8005abc <_svfiprintf_r+0x124>
 8005b2e:	fb05 2101 	mla	r1, r5, r1, r2
 8005b32:	2301      	movs	r3, #1
 8005b34:	4607      	mov	r7, r0
 8005b36:	e7f0      	b.n	8005b1a <_svfiprintf_r+0x182>
 8005b38:	ab03      	add	r3, sp, #12
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <_svfiprintf_r+0x1ec>)
 8005b40:	a904      	add	r1, sp, #16
 8005b42:	4640      	mov	r0, r8
 8005b44:	f3af 8000 	nop.w
 8005b48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b4c:	4681      	mov	r9, r0
 8005b4e:	d1d6      	bne.n	8005afe <_svfiprintf_r+0x166>
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	065b      	lsls	r3, r3, #25
 8005b54:	f53f af35 	bmi.w	80059c2 <_svfiprintf_r+0x2a>
 8005b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b5a:	b01d      	add	sp, #116	; 0x74
 8005b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b60:	ab03      	add	r3, sp, #12
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	4622      	mov	r2, r4
 8005b66:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <_svfiprintf_r+0x1ec>)
 8005b68:	a904      	add	r1, sp, #16
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	f000 f882 	bl	8005c74 <_printf_i>
 8005b70:	e7ea      	b.n	8005b48 <_svfiprintf_r+0x1b0>
 8005b72:	bf00      	nop
 8005b74:	08006104 	.word	0x08006104
 8005b78:	0800610a 	.word	0x0800610a
 8005b7c:	0800610e 	.word	0x0800610e
 8005b80:	00000000 	.word	0x00000000
 8005b84:	080058e5 	.word	0x080058e5

08005b88 <_printf_common>:
 8005b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	4691      	mov	r9, r2
 8005b8e:	461f      	mov	r7, r3
 8005b90:	688a      	ldr	r2, [r1, #8]
 8005b92:	690b      	ldr	r3, [r1, #16]
 8005b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	bfb8      	it	lt
 8005b9c:	4613      	movlt	r3, r2
 8005b9e:	f8c9 3000 	str.w	r3, [r9]
 8005ba2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	b112      	cbz	r2, 8005bb2 <_printf_common+0x2a>
 8005bac:	3301      	adds	r3, #1
 8005bae:	f8c9 3000 	str.w	r3, [r9]
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	0699      	lsls	r1, r3, #26
 8005bb6:	bf42      	ittt	mi
 8005bb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bbc:	3302      	addmi	r3, #2
 8005bbe:	f8c9 3000 	strmi.w	r3, [r9]
 8005bc2:	6825      	ldr	r5, [r4, #0]
 8005bc4:	f015 0506 	ands.w	r5, r5, #6
 8005bc8:	d107      	bne.n	8005bda <_printf_common+0x52>
 8005bca:	f104 0a19 	add.w	sl, r4, #25
 8005bce:	68e3      	ldr	r3, [r4, #12]
 8005bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	42ab      	cmp	r3, r5
 8005bd8:	dc28      	bgt.n	8005c2c <_printf_common+0xa4>
 8005bda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005bde:	6822      	ldr	r2, [r4, #0]
 8005be0:	3300      	adds	r3, #0
 8005be2:	bf18      	it	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	0692      	lsls	r2, r2, #26
 8005be8:	d42d      	bmi.n	8005c46 <_printf_common+0xbe>
 8005bea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bee:	4639      	mov	r1, r7
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	47c0      	blx	r8
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d020      	beq.n	8005c3a <_printf_common+0xb2>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	68e5      	ldr	r5, [r4, #12]
 8005bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8005c00:	f003 0306 	and.w	r3, r3, #6
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	bf08      	it	eq
 8005c08:	1aad      	subeq	r5, r5, r2
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	6922      	ldr	r2, [r4, #16]
 8005c0e:	bf0c      	ite	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	2500      	movne	r5, #0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfc4      	itt	gt
 8005c1a:	1a9b      	subgt	r3, r3, r2
 8005c1c:	18ed      	addgt	r5, r5, r3
 8005c1e:	f04f 0900 	mov.w	r9, #0
 8005c22:	341a      	adds	r4, #26
 8005c24:	454d      	cmp	r5, r9
 8005c26:	d11a      	bne.n	8005c5e <_printf_common+0xd6>
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e008      	b.n	8005c3e <_printf_common+0xb6>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4652      	mov	r2, sl
 8005c30:	4639      	mov	r1, r7
 8005c32:	4630      	mov	r0, r6
 8005c34:	47c0      	blx	r8
 8005c36:	3001      	adds	r0, #1
 8005c38:	d103      	bne.n	8005c42 <_printf_common+0xba>
 8005c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c42:	3501      	adds	r5, #1
 8005c44:	e7c3      	b.n	8005bce <_printf_common+0x46>
 8005c46:	18e1      	adds	r1, r4, r3
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	2030      	movs	r0, #48	; 0x30
 8005c4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c50:	4422      	add	r2, r4
 8005c52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	e7c5      	b.n	8005bea <_printf_common+0x62>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4622      	mov	r2, r4
 8005c62:	4639      	mov	r1, r7
 8005c64:	4630      	mov	r0, r6
 8005c66:	47c0      	blx	r8
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d0e6      	beq.n	8005c3a <_printf_common+0xb2>
 8005c6c:	f109 0901 	add.w	r9, r9, #1
 8005c70:	e7d8      	b.n	8005c24 <_printf_common+0x9c>
	...

08005c74 <_printf_i>:
 8005c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	7e09      	ldrb	r1, [r1, #24]
 8005c80:	b085      	sub	sp, #20
 8005c82:	296e      	cmp	r1, #110	; 0x6e
 8005c84:	4617      	mov	r7, r2
 8005c86:	4606      	mov	r6, r0
 8005c88:	4698      	mov	r8, r3
 8005c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c8c:	f000 80b3 	beq.w	8005df6 <_printf_i+0x182>
 8005c90:	d822      	bhi.n	8005cd8 <_printf_i+0x64>
 8005c92:	2963      	cmp	r1, #99	; 0x63
 8005c94:	d036      	beq.n	8005d04 <_printf_i+0x90>
 8005c96:	d80a      	bhi.n	8005cae <_printf_i+0x3a>
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	f000 80b9 	beq.w	8005e10 <_printf_i+0x19c>
 8005c9e:	2958      	cmp	r1, #88	; 0x58
 8005ca0:	f000 8083 	beq.w	8005daa <_printf_i+0x136>
 8005ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cac:	e032      	b.n	8005d14 <_printf_i+0xa0>
 8005cae:	2964      	cmp	r1, #100	; 0x64
 8005cb0:	d001      	beq.n	8005cb6 <_printf_i+0x42>
 8005cb2:	2969      	cmp	r1, #105	; 0x69
 8005cb4:	d1f6      	bne.n	8005ca4 <_printf_i+0x30>
 8005cb6:	6820      	ldr	r0, [r4, #0]
 8005cb8:	6813      	ldr	r3, [r2, #0]
 8005cba:	0605      	lsls	r5, r0, #24
 8005cbc:	f103 0104 	add.w	r1, r3, #4
 8005cc0:	d52a      	bpl.n	8005d18 <_printf_i+0xa4>
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da03      	bge.n	8005cd2 <_printf_i+0x5e>
 8005cca:	222d      	movs	r2, #45	; 0x2d
 8005ccc:	425b      	negs	r3, r3
 8005cce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cd2:	486f      	ldr	r0, [pc, #444]	; (8005e90 <_printf_i+0x21c>)
 8005cd4:	220a      	movs	r2, #10
 8005cd6:	e039      	b.n	8005d4c <_printf_i+0xd8>
 8005cd8:	2973      	cmp	r1, #115	; 0x73
 8005cda:	f000 809d 	beq.w	8005e18 <_printf_i+0x1a4>
 8005cde:	d808      	bhi.n	8005cf2 <_printf_i+0x7e>
 8005ce0:	296f      	cmp	r1, #111	; 0x6f
 8005ce2:	d020      	beq.n	8005d26 <_printf_i+0xb2>
 8005ce4:	2970      	cmp	r1, #112	; 0x70
 8005ce6:	d1dd      	bne.n	8005ca4 <_printf_i+0x30>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	f043 0320 	orr.w	r3, r3, #32
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	e003      	b.n	8005cfa <_printf_i+0x86>
 8005cf2:	2975      	cmp	r1, #117	; 0x75
 8005cf4:	d017      	beq.n	8005d26 <_printf_i+0xb2>
 8005cf6:	2978      	cmp	r1, #120	; 0x78
 8005cf8:	d1d4      	bne.n	8005ca4 <_printf_i+0x30>
 8005cfa:	2378      	movs	r3, #120	; 0x78
 8005cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d00:	4864      	ldr	r0, [pc, #400]	; (8005e94 <_printf_i+0x220>)
 8005d02:	e055      	b.n	8005db0 <_printf_i+0x13c>
 8005d04:	6813      	ldr	r3, [r2, #0]
 8005d06:	1d19      	adds	r1, r3, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6011      	str	r1, [r2, #0]
 8005d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d14:	2301      	movs	r3, #1
 8005d16:	e08c      	b.n	8005e32 <_printf_i+0x1be>
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6011      	str	r1, [r2, #0]
 8005d1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d20:	bf18      	it	ne
 8005d22:	b21b      	sxthne	r3, r3
 8005d24:	e7cf      	b.n	8005cc6 <_printf_i+0x52>
 8005d26:	6813      	ldr	r3, [r2, #0]
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1d18      	adds	r0, r3, #4
 8005d2c:	6010      	str	r0, [r2, #0]
 8005d2e:	0628      	lsls	r0, r5, #24
 8005d30:	d501      	bpl.n	8005d36 <_printf_i+0xc2>
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	e002      	b.n	8005d3c <_printf_i+0xc8>
 8005d36:	0668      	lsls	r0, r5, #25
 8005d38:	d5fb      	bpl.n	8005d32 <_printf_i+0xbe>
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	4854      	ldr	r0, [pc, #336]	; (8005e90 <_printf_i+0x21c>)
 8005d3e:	296f      	cmp	r1, #111	; 0x6f
 8005d40:	bf14      	ite	ne
 8005d42:	220a      	movne	r2, #10
 8005d44:	2208      	moveq	r2, #8
 8005d46:	2100      	movs	r1, #0
 8005d48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d4c:	6865      	ldr	r5, [r4, #4]
 8005d4e:	60a5      	str	r5, [r4, #8]
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	f2c0 8095 	blt.w	8005e80 <_printf_i+0x20c>
 8005d56:	6821      	ldr	r1, [r4, #0]
 8005d58:	f021 0104 	bic.w	r1, r1, #4
 8005d5c:	6021      	str	r1, [r4, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d13d      	bne.n	8005dde <_printf_i+0x16a>
 8005d62:	2d00      	cmp	r5, #0
 8005d64:	f040 808e 	bne.w	8005e84 <_printf_i+0x210>
 8005d68:	4665      	mov	r5, ip
 8005d6a:	2a08      	cmp	r2, #8
 8005d6c:	d10b      	bne.n	8005d86 <_printf_i+0x112>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	07db      	lsls	r3, r3, #31
 8005d72:	d508      	bpl.n	8005d86 <_printf_i+0x112>
 8005d74:	6923      	ldr	r3, [r4, #16]
 8005d76:	6862      	ldr	r2, [r4, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	bfde      	ittt	le
 8005d7c:	2330      	movle	r3, #48	; 0x30
 8005d7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d86:	ebac 0305 	sub.w	r3, ip, r5
 8005d8a:	6123      	str	r3, [r4, #16]
 8005d8c:	f8cd 8000 	str.w	r8, [sp]
 8005d90:	463b      	mov	r3, r7
 8005d92:	aa03      	add	r2, sp, #12
 8005d94:	4621      	mov	r1, r4
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff fef6 	bl	8005b88 <_printf_common>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d14d      	bne.n	8005e3c <_printf_i+0x1c8>
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005da4:	b005      	add	sp, #20
 8005da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005daa:	4839      	ldr	r0, [pc, #228]	; (8005e90 <_printf_i+0x21c>)
 8005dac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005db0:	6813      	ldr	r3, [r2, #0]
 8005db2:	6821      	ldr	r1, [r4, #0]
 8005db4:	1d1d      	adds	r5, r3, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6015      	str	r5, [r2, #0]
 8005dba:	060a      	lsls	r2, r1, #24
 8005dbc:	d50b      	bpl.n	8005dd6 <_printf_i+0x162>
 8005dbe:	07ca      	lsls	r2, r1, #31
 8005dc0:	bf44      	itt	mi
 8005dc2:	f041 0120 	orrmi.w	r1, r1, #32
 8005dc6:	6021      	strmi	r1, [r4, #0]
 8005dc8:	b91b      	cbnz	r3, 8005dd2 <_printf_i+0x15e>
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	f022 0220 	bic.w	r2, r2, #32
 8005dd0:	6022      	str	r2, [r4, #0]
 8005dd2:	2210      	movs	r2, #16
 8005dd4:	e7b7      	b.n	8005d46 <_printf_i+0xd2>
 8005dd6:	064d      	lsls	r5, r1, #25
 8005dd8:	bf48      	it	mi
 8005dda:	b29b      	uxthmi	r3, r3
 8005ddc:	e7ef      	b.n	8005dbe <_printf_i+0x14a>
 8005dde:	4665      	mov	r5, ip
 8005de0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005de4:	fb02 3311 	mls	r3, r2, r1, r3
 8005de8:	5cc3      	ldrb	r3, [r0, r3]
 8005dea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005dee:	460b      	mov	r3, r1
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d1f5      	bne.n	8005de0 <_printf_i+0x16c>
 8005df4:	e7b9      	b.n	8005d6a <_printf_i+0xf6>
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	6961      	ldr	r1, [r4, #20]
 8005dfc:	1d18      	adds	r0, r3, #4
 8005dfe:	6010      	str	r0, [r2, #0]
 8005e00:	0628      	lsls	r0, r5, #24
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	d501      	bpl.n	8005e0a <_printf_i+0x196>
 8005e06:	6019      	str	r1, [r3, #0]
 8005e08:	e002      	b.n	8005e10 <_printf_i+0x19c>
 8005e0a:	066a      	lsls	r2, r5, #25
 8005e0c:	d5fb      	bpl.n	8005e06 <_printf_i+0x192>
 8005e0e:	8019      	strh	r1, [r3, #0]
 8005e10:	2300      	movs	r3, #0
 8005e12:	6123      	str	r3, [r4, #16]
 8005e14:	4665      	mov	r5, ip
 8005e16:	e7b9      	b.n	8005d8c <_printf_i+0x118>
 8005e18:	6813      	ldr	r3, [r2, #0]
 8005e1a:	1d19      	adds	r1, r3, #4
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	681d      	ldr	r5, [r3, #0]
 8005e20:	6862      	ldr	r2, [r4, #4]
 8005e22:	2100      	movs	r1, #0
 8005e24:	4628      	mov	r0, r5
 8005e26:	f7fa fa13 	bl	8000250 <memchr>
 8005e2a:	b108      	cbz	r0, 8005e30 <_printf_i+0x1bc>
 8005e2c:	1b40      	subs	r0, r0, r5
 8005e2e:	6060      	str	r0, [r4, #4]
 8005e30:	6863      	ldr	r3, [r4, #4]
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	2300      	movs	r3, #0
 8005e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3a:	e7a7      	b.n	8005d8c <_printf_i+0x118>
 8005e3c:	6923      	ldr	r3, [r4, #16]
 8005e3e:	462a      	mov	r2, r5
 8005e40:	4639      	mov	r1, r7
 8005e42:	4630      	mov	r0, r6
 8005e44:	47c0      	blx	r8
 8005e46:	3001      	adds	r0, #1
 8005e48:	d0aa      	beq.n	8005da0 <_printf_i+0x12c>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	079b      	lsls	r3, r3, #30
 8005e4e:	d413      	bmi.n	8005e78 <_printf_i+0x204>
 8005e50:	68e0      	ldr	r0, [r4, #12]
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	4298      	cmp	r0, r3
 8005e56:	bfb8      	it	lt
 8005e58:	4618      	movlt	r0, r3
 8005e5a:	e7a3      	b.n	8005da4 <_printf_i+0x130>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	464a      	mov	r2, r9
 8005e60:	4639      	mov	r1, r7
 8005e62:	4630      	mov	r0, r6
 8005e64:	47c0      	blx	r8
 8005e66:	3001      	adds	r0, #1
 8005e68:	d09a      	beq.n	8005da0 <_printf_i+0x12c>
 8005e6a:	3501      	adds	r5, #1
 8005e6c:	68e3      	ldr	r3, [r4, #12]
 8005e6e:	9a03      	ldr	r2, [sp, #12]
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	42ab      	cmp	r3, r5
 8005e74:	dcf2      	bgt.n	8005e5c <_printf_i+0x1e8>
 8005e76:	e7eb      	b.n	8005e50 <_printf_i+0x1dc>
 8005e78:	2500      	movs	r5, #0
 8005e7a:	f104 0919 	add.w	r9, r4, #25
 8005e7e:	e7f5      	b.n	8005e6c <_printf_i+0x1f8>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1ac      	bne.n	8005dde <_printf_i+0x16a>
 8005e84:	7803      	ldrb	r3, [r0, #0]
 8005e86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e8e:	e76c      	b.n	8005d6a <_printf_i+0xf6>
 8005e90:	08006115 	.word	0x08006115
 8005e94:	08006126 	.word	0x08006126

08005e98 <memmove>:
 8005e98:	4288      	cmp	r0, r1
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	eb01 0302 	add.w	r3, r1, r2
 8005ea0:	d807      	bhi.n	8005eb2 <memmove+0x1a>
 8005ea2:	1e42      	subs	r2, r0, #1
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	d00a      	beq.n	8005ebe <memmove+0x26>
 8005ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eac:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005eb0:	e7f8      	b.n	8005ea4 <memmove+0xc>
 8005eb2:	4283      	cmp	r3, r0
 8005eb4:	d9f5      	bls.n	8005ea2 <memmove+0xa>
 8005eb6:	1881      	adds	r1, r0, r2
 8005eb8:	1ad2      	subs	r2, r2, r3
 8005eba:	42d3      	cmn	r3, r2
 8005ebc:	d100      	bne.n	8005ec0 <memmove+0x28>
 8005ebe:	bd10      	pop	{r4, pc}
 8005ec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ec4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ec8:	e7f7      	b.n	8005eba <memmove+0x22>
	...

08005ecc <_free_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4605      	mov	r5, r0
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	d045      	beq.n	8005f60 <_free_r+0x94>
 8005ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed8:	1f0c      	subs	r4, r1, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bfb8      	it	lt
 8005ede:	18e4      	addlt	r4, r4, r3
 8005ee0:	f000 f8d2 	bl	8006088 <__malloc_lock>
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <_free_r+0x98>)
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	4610      	mov	r0, r2
 8005eea:	b933      	cbnz	r3, 8005efa <_free_r+0x2e>
 8005eec:	6063      	str	r3, [r4, #4]
 8005eee:	6014      	str	r4, [r2, #0]
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ef6:	f000 b8c8 	b.w	800608a <__malloc_unlock>
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	d90c      	bls.n	8005f18 <_free_r+0x4c>
 8005efe:	6821      	ldr	r1, [r4, #0]
 8005f00:	1862      	adds	r2, r4, r1
 8005f02:	4293      	cmp	r3, r2
 8005f04:	bf04      	itt	eq
 8005f06:	681a      	ldreq	r2, [r3, #0]
 8005f08:	685b      	ldreq	r3, [r3, #4]
 8005f0a:	6063      	str	r3, [r4, #4]
 8005f0c:	bf04      	itt	eq
 8005f0e:	1852      	addeq	r2, r2, r1
 8005f10:	6022      	streq	r2, [r4, #0]
 8005f12:	6004      	str	r4, [r0, #0]
 8005f14:	e7ec      	b.n	8005ef0 <_free_r+0x24>
 8005f16:	4613      	mov	r3, r2
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	b10a      	cbz	r2, 8005f20 <_free_r+0x54>
 8005f1c:	42a2      	cmp	r2, r4
 8005f1e:	d9fa      	bls.n	8005f16 <_free_r+0x4a>
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	1858      	adds	r0, r3, r1
 8005f24:	42a0      	cmp	r0, r4
 8005f26:	d10b      	bne.n	8005f40 <_free_r+0x74>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	4401      	add	r1, r0
 8005f2c:	1858      	adds	r0, r3, r1
 8005f2e:	4282      	cmp	r2, r0
 8005f30:	6019      	str	r1, [r3, #0]
 8005f32:	d1dd      	bne.n	8005ef0 <_free_r+0x24>
 8005f34:	6810      	ldr	r0, [r2, #0]
 8005f36:	6852      	ldr	r2, [r2, #4]
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	4401      	add	r1, r0
 8005f3c:	6019      	str	r1, [r3, #0]
 8005f3e:	e7d7      	b.n	8005ef0 <_free_r+0x24>
 8005f40:	d902      	bls.n	8005f48 <_free_r+0x7c>
 8005f42:	230c      	movs	r3, #12
 8005f44:	602b      	str	r3, [r5, #0]
 8005f46:	e7d3      	b.n	8005ef0 <_free_r+0x24>
 8005f48:	6820      	ldr	r0, [r4, #0]
 8005f4a:	1821      	adds	r1, r4, r0
 8005f4c:	428a      	cmp	r2, r1
 8005f4e:	bf04      	itt	eq
 8005f50:	6811      	ldreq	r1, [r2, #0]
 8005f52:	6852      	ldreq	r2, [r2, #4]
 8005f54:	6062      	str	r2, [r4, #4]
 8005f56:	bf04      	itt	eq
 8005f58:	1809      	addeq	r1, r1, r0
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	605c      	str	r4, [r3, #4]
 8005f5e:	e7c7      	b.n	8005ef0 <_free_r+0x24>
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	bf00      	nop
 8005f64:	20003de4 	.word	0x20003de4

08005f68 <_malloc_r>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	1ccd      	adds	r5, r1, #3
 8005f6c:	f025 0503 	bic.w	r5, r5, #3
 8005f70:	3508      	adds	r5, #8
 8005f72:	2d0c      	cmp	r5, #12
 8005f74:	bf38      	it	cc
 8005f76:	250c      	movcc	r5, #12
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	db01      	blt.n	8005f82 <_malloc_r+0x1a>
 8005f7e:	42a9      	cmp	r1, r5
 8005f80:	d903      	bls.n	8005f8a <_malloc_r+0x22>
 8005f82:	230c      	movs	r3, #12
 8005f84:	6033      	str	r3, [r6, #0]
 8005f86:	2000      	movs	r0, #0
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	f000 f87d 	bl	8006088 <__malloc_lock>
 8005f8e:	4a21      	ldr	r2, [pc, #132]	; (8006014 <_malloc_r+0xac>)
 8005f90:	6814      	ldr	r4, [r2, #0]
 8005f92:	4621      	mov	r1, r4
 8005f94:	b991      	cbnz	r1, 8005fbc <_malloc_r+0x54>
 8005f96:	4c20      	ldr	r4, [pc, #128]	; (8006018 <_malloc_r+0xb0>)
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	b91b      	cbnz	r3, 8005fa4 <_malloc_r+0x3c>
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f863 	bl	8006068 <_sbrk_r>
 8005fa2:	6020      	str	r0, [r4, #0]
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f000 f85e 	bl	8006068 <_sbrk_r>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d124      	bne.n	8005ffa <_malloc_r+0x92>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	6033      	str	r3, [r6, #0]
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f000 f868 	bl	800608a <__malloc_unlock>
 8005fba:	e7e4      	b.n	8005f86 <_malloc_r+0x1e>
 8005fbc:	680b      	ldr	r3, [r1, #0]
 8005fbe:	1b5b      	subs	r3, r3, r5
 8005fc0:	d418      	bmi.n	8005ff4 <_malloc_r+0x8c>
 8005fc2:	2b0b      	cmp	r3, #11
 8005fc4:	d90f      	bls.n	8005fe6 <_malloc_r+0x7e>
 8005fc6:	600b      	str	r3, [r1, #0]
 8005fc8:	50cd      	str	r5, [r1, r3]
 8005fca:	18cc      	adds	r4, r1, r3
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 f85c 	bl	800608a <__malloc_unlock>
 8005fd2:	f104 000b 	add.w	r0, r4, #11
 8005fd6:	1d23      	adds	r3, r4, #4
 8005fd8:	f020 0007 	bic.w	r0, r0, #7
 8005fdc:	1ac3      	subs	r3, r0, r3
 8005fde:	d0d3      	beq.n	8005f88 <_malloc_r+0x20>
 8005fe0:	425a      	negs	r2, r3
 8005fe2:	50e2      	str	r2, [r4, r3]
 8005fe4:	e7d0      	b.n	8005f88 <_malloc_r+0x20>
 8005fe6:	428c      	cmp	r4, r1
 8005fe8:	684b      	ldr	r3, [r1, #4]
 8005fea:	bf16      	itet	ne
 8005fec:	6063      	strne	r3, [r4, #4]
 8005fee:	6013      	streq	r3, [r2, #0]
 8005ff0:	460c      	movne	r4, r1
 8005ff2:	e7eb      	b.n	8005fcc <_malloc_r+0x64>
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	6849      	ldr	r1, [r1, #4]
 8005ff8:	e7cc      	b.n	8005f94 <_malloc_r+0x2c>
 8005ffa:	1cc4      	adds	r4, r0, #3
 8005ffc:	f024 0403 	bic.w	r4, r4, #3
 8006000:	42a0      	cmp	r0, r4
 8006002:	d005      	beq.n	8006010 <_malloc_r+0xa8>
 8006004:	1a21      	subs	r1, r4, r0
 8006006:	4630      	mov	r0, r6
 8006008:	f000 f82e 	bl	8006068 <_sbrk_r>
 800600c:	3001      	adds	r0, #1
 800600e:	d0cf      	beq.n	8005fb0 <_malloc_r+0x48>
 8006010:	6025      	str	r5, [r4, #0]
 8006012:	e7db      	b.n	8005fcc <_malloc_r+0x64>
 8006014:	20003de4 	.word	0x20003de4
 8006018:	20003de8 	.word	0x20003de8

0800601c <_realloc_r>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	4607      	mov	r7, r0
 8006020:	4614      	mov	r4, r2
 8006022:	460e      	mov	r6, r1
 8006024:	b921      	cbnz	r1, 8006030 <_realloc_r+0x14>
 8006026:	4611      	mov	r1, r2
 8006028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800602c:	f7ff bf9c 	b.w	8005f68 <_malloc_r>
 8006030:	b922      	cbnz	r2, 800603c <_realloc_r+0x20>
 8006032:	f7ff ff4b 	bl	8005ecc <_free_r>
 8006036:	4625      	mov	r5, r4
 8006038:	4628      	mov	r0, r5
 800603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800603c:	f000 f826 	bl	800608c <_malloc_usable_size_r>
 8006040:	42a0      	cmp	r0, r4
 8006042:	d20f      	bcs.n	8006064 <_realloc_r+0x48>
 8006044:	4621      	mov	r1, r4
 8006046:	4638      	mov	r0, r7
 8006048:	f7ff ff8e 	bl	8005f68 <_malloc_r>
 800604c:	4605      	mov	r5, r0
 800604e:	2800      	cmp	r0, #0
 8006050:	d0f2      	beq.n	8006038 <_realloc_r+0x1c>
 8006052:	4631      	mov	r1, r6
 8006054:	4622      	mov	r2, r4
 8006056:	f7ff fc11 	bl	800587c <memcpy>
 800605a:	4631      	mov	r1, r6
 800605c:	4638      	mov	r0, r7
 800605e:	f7ff ff35 	bl	8005ecc <_free_r>
 8006062:	e7e9      	b.n	8006038 <_realloc_r+0x1c>
 8006064:	4635      	mov	r5, r6
 8006066:	e7e7      	b.n	8006038 <_realloc_r+0x1c>

08006068 <_sbrk_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4c06      	ldr	r4, [pc, #24]	; (8006084 <_sbrk_r+0x1c>)
 800606c:	2300      	movs	r3, #0
 800606e:	4605      	mov	r5, r0
 8006070:	4608      	mov	r0, r1
 8006072:	6023      	str	r3, [r4, #0]
 8006074:	f7ff fb4c 	bl	8005710 <_sbrk>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_sbrk_r+0x1a>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	b103      	cbz	r3, 8006082 <_sbrk_r+0x1a>
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	20004364 	.word	0x20004364

08006088 <__malloc_lock>:
 8006088:	4770      	bx	lr

0800608a <__malloc_unlock>:
 800608a:	4770      	bx	lr

0800608c <_malloc_usable_size_r>:
 800608c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006090:	1f18      	subs	r0, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	bfbc      	itt	lt
 8006096:	580b      	ldrlt	r3, [r1, r0]
 8006098:	18c0      	addlt	r0, r0, r3
 800609a:	4770      	bx	lr

0800609c <_init>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	bf00      	nop
 80060a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a2:	bc08      	pop	{r3}
 80060a4:	469e      	mov	lr, r3
 80060a6:	4770      	bx	lr

080060a8 <_fini>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	bf00      	nop
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr
